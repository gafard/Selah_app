// Edge Function pour g√©n√©ration de plans 100% locale
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

console.log("üî• Generate Local Plan Function loaded!")

// Interface pour la requ√™te
interface LocalPlanRequest {
  userId: string
  planName: string
  presetId?: string // ID du preset (optionnel)
  isCustom: boolean
  startDate: string // Format 'YYYY-MM-DD'
  parameters: {
    totalDays: number
    order: 'traditional' | 'chronological' | 'thematic' | 'historical'
    books: string[] // ['OT', 'NT', 'Gospels', 'Psalms', etc.]
    focus?: string // th√®me de focus
    daysPerWeek?: number // jours par semaine
    minutesPerDay?: number // minutes par jour
    includePsalms?: boolean // inclure psaumes quotidiens
    includeProverbs?: boolean // inclure proverbes quotidiens
  }
  profileData?: any // donn√©es du profil utilisateur
}

// CORS
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const {
      userId,
      planName,
      presetId,
      isCustom,
      startDate,
      parameters,
      profileData
    }: LocalPlanRequest = await req.json()

    console.log('üìã Local Plan Request:', {
      userId,
      planName,
      presetId,
      isCustom,
      startDate,
      parameters
    })

    // Validation
    if (!userId || !planName || !startDate || !parameters) {
      throw new Error('Param√®tres manquants: userId, planName, startDate, parameters requis')
    }

    if (parameters.totalDays < 1 || parameters.totalDays > 365) {
      throw new Error('totalDays doit √™tre entre 1 et 365')
    }

    // Cr√©er un client Supabase
    const supabaseAdmin = createClient(
      Deno.env.get('SUPABASE_URL')!,
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    )

    // 1. R√âCUP√âRER LE PRESET SI FOURNI
    let presetData = null
    if (presetId) {
      const { data: preset, error: presetError } = await supabaseAdmin
        .from('plan_presets')
        .select('*')
        .eq('id', presetId)
        .single()

      if (presetError) {
        console.error('‚ùå Erreur r√©cup√©ration preset:', presetError)
        throw new Error(`Preset non trouv√©: ${presetError.message}`)
      }

      presetData = preset
      console.log('‚úÖ Preset r√©cup√©r√©:', preset.name)
    }

    // 2. G√âN√âRER LE PLAN LOCALEMENT
    const generatedPlan = await generateLocalPlan({
      preset: presetData,
      isCustom,
      parameters,
      profileData,
      startDate: new Date(startDate)
    })

    console.log('üìö Plan g√©n√©r√©:', {
      totalDays: generatedPlan.days.length,
      references: generatedPlan.days.slice(0, 3).map(d => d.references)
    })

    // 3. INS√âRER LE PLAN DANS LA BASE
    const { data: newPlan, error: planError } = await supabaseAdmin
      .from('local_plans')
      .insert({
        user_id: userId,
        name: planName,
        preset_id: presetId || null,
        is_custom: isCustom,
        start_date: startDate,
        total_days: parameters.totalDays,
        parameters: parameters,
        generated_content: generatedPlan,
        status: 'active'
      })
      .select()
      .single()

    if (planError) {
      console.error('‚ùå Erreur insertion plan:', planError)
      throw new Error(`Erreur lors de la cr√©ation du plan: ${planError.message}`)
    }

    const planId = newPlan.id
    console.log('‚úÖ Plan cr√©√© avec ID:', planId)

    // 4. INS√âRER LES JOURS DU PLAN
    const planDaysToInsert = generatedPlan.days.map((day, index) => ({
      plan_id: planId,
      day_number: index + 1,
      date: day.date,
      bible_references: day.references,
      meditation_theme: day.meditationTheme,
      prayer_subjects: day.prayerSubjects,
      memory_verse: day.memoryVerse,
      is_completed: false
    }))

    const { error: daysError } = await supabaseAdmin
      .from('local_plan_days')
      .insert(planDaysToInsert)

    if (daysError) {
      console.error('‚ùå Erreur insertion jours:', daysError)
      throw new Error(`Erreur lors de l'insertion des jours: ${daysError.message}`)
    }

    // 5. METTRE √Ä JOUR LE PROFIL UTILISATEUR
    const { error: updateError } = await supabaseAdmin.rpc('update_user_current_plan', {
      user_id: userId,
      plan_id: planId
    })

    if (updateError) {
      console.error('‚ùå Erreur mise √† jour utilisateur:', updateError)
      // Ne pas faire √©chouer pour cette erreur
    }

    console.log('üéâ Plan local g√©n√©r√© avec succ√®s!')

    return new Response(
      JSON.stringify({ 
        success: true,
        planId: planId,
        message: 'Plan local g√©n√©r√© avec succ√®s',
        totalDays: parameters.totalDays,
        generatedDays: generatedPlan.days.length
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 200 }
    )

  } catch (error) {
    console.error('üí• Erreur dans generate-local-plan:', error.message)
    return new Response(
      JSON.stringify({ 
        success: false,
        error: error.message 
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 400 }
    )
  }
})

// Fonction de g√©n√©ration locale de plan
async function generateLocalPlan({
  preset,
  isCustom,
  parameters,
  profileData,
  startDate
}: {
  preset: any
  isCustom: boolean
  parameters: any
  profileData: any
  startDate: Date
}) {
  const days = []
  const currentDate = new Date(startDate)
  
  // D√©finir les livres disponibles selon les param√®tres
  const availableBooks = getAvailableBooks(parameters.books)
  
  // G√©n√©rer les jours
  for (let day = 1; day <= parameters.totalDays; day++) {
    const dayData = {
      date: currentDate.toISOString().split('T')[0],
      references: generateDayReferences(availableBooks, parameters, day),
      meditationTheme: generateMeditationTheme(parameters, day),
      prayerSubjects: generatePrayerSubjects(parameters, day),
      memoryVerse: generateMemoryVerse(availableBooks, day)
    }
    
    days.push(dayData)
    
    // Passer au jour suivant
    currentDate.setDate(currentDate.getDate() + 1)
  }
  
  return {
    days,
    metadata: {
      generatedAt: new Date().toISOString(),
      preset: preset?.name || null,
      isCustom,
      parameters
    }
  }
}

// Obtenir les livres disponibles selon les param√®tres
function getAvailableBooks(books: string[]): any[] {
  const bookDatabase = {
    'OT': [
      { name: 'Gen√®se', chapters: 50, testament: 'OT' },
      { name: 'Exode', chapters: 40, testament: 'OT' },
      { name: 'L√©vitique', chapters: 27, testament: 'OT' },
      { name: 'Nombres', chapters: 36, testament: 'OT' },
      { name: 'Deut√©ronome', chapters: 34, testament: 'OT' },
      { name: 'Josu√©', chapters: 24, testament: 'OT' },
      { name: 'Juges', chapters: 21, testament: 'OT' },
      { name: 'Ruth', chapters: 4, testament: 'OT' },
      { name: '1 Samuel', chapters: 31, testament: 'OT' },
      { name: '2 Samuel', chapters: 24, testament: 'OT' },
      { name: '1 Rois', chapters: 22, testament: 'OT' },
      { name: '2 Rois', chapters: 25, testament: 'OT' },
      { name: '1 Chroniques', chapters: 29, testament: 'OT' },
      { name: '2 Chroniques', chapters: 36, testament: 'OT' },
      { name: 'Esdras', chapters: 10, testament: 'OT' },
      { name: 'N√©h√©mie', chapters: 13, testament: 'OT' },
      { name: 'Esther', chapters: 10, testament: 'OT' },
      { name: 'Job', chapters: 42, testament: 'OT' },
      { name: 'Psaumes', chapters: 150, testament: 'OT' },
      { name: 'Proverbes', chapters: 31, testament: 'OT' },
      { name: 'Eccl√©siaste', chapters: 12, testament: 'OT' },
      { name: 'Cantique des Cantiques', chapters: 8, testament: 'OT' },
      { name: '√âsa√Øe', chapters: 66, testament: 'OT' },
      { name: 'J√©r√©mie', chapters: 52, testament: 'OT' },
      { name: 'Lamentations', chapters: 5, testament: 'OT' },
      { name: '√âz√©chiel', chapters: 48, testament: 'OT' },
      { name: 'Daniel', chapters: 12, testament: 'OT' },
      { name: 'Os√©e', chapters: 14, testament: 'OT' },
      { name: 'Jo√´l', chapters: 3, testament: 'OT' },
      { name: 'Amos', chapters: 9, testament: 'OT' },
      { name: 'Abdias', chapters: 1, testament: 'OT' },
      { name: 'Jonas', chapters: 4, testament: 'OT' },
      { name: 'Mich√©e', chapters: 7, testament: 'OT' },
      { name: 'Nahum', chapters: 3, testament: 'OT' },
      { name: 'Habacuc', chapters: 3, testament: 'OT' },
      { name: 'Sophonie', chapters: 3, testament: 'OT' },
      { name: 'Agg√©e', chapters: 2, testament: 'OT' },
      { name: 'Zacharie', chapters: 14, testament: 'OT' },
      { name: 'Malachie', chapters: 4, testament: 'OT' }
    ],
    'NT': [
      { name: 'Matthieu', chapters: 28, testament: 'NT' },
      { name: 'Marc', chapters: 16, testament: 'NT' },
      { name: 'Luc', chapters: 24, testament: 'NT' },
      { name: 'Jean', chapters: 21, testament: 'NT' },
      { name: 'Actes', chapters: 28, testament: 'NT' },
      { name: 'Romains', chapters: 16, testament: 'NT' },
      { name: '1 Corinthiens', chapters: 16, testament: 'NT' },
      { name: '2 Corinthiens', chapters: 13, testament: 'NT' },
      { name: 'Galates', chapters: 6, testament: 'NT' },
      { name: '√âph√©siens', chapters: 6, testament: 'NT' },
      { name: 'Philippiens', chapters: 4, testament: 'NT' },
      { name: 'Colossiens', chapters: 4, testament: 'NT' },
      { name: '1 Thessaloniciens', chapters: 5, testament: 'NT' },
      { name: '2 Thessaloniciens', chapters: 3, testament: 'NT' },
      { name: '1 Timoth√©e', chapters: 6, testament: 'NT' },
      { name: '2 Timoth√©e', chapters: 4, testament: 'NT' },
      { name: 'Tite', chapters: 3, testament: 'NT' },
      { name: 'Phil√©mon', chapters: 1, testament: 'NT' },
      { name: 'H√©breux', chapters: 13, testament: 'NT' },
      { name: 'Jacques', chapters: 5, testament: 'NT' },
      { name: '1 Pierre', chapters: 5, testament: 'NT' },
      { name: '2 Pierre', chapters: 3, testament: 'NT' },
      { name: '1 Jean', chapters: 5, testament: 'NT' },
      { name: '2 Jean', chapters: 1, testament: 'NT' },
      { name: '3 Jean', chapters: 1, testament: 'NT' },
      { name: 'Jude', chapters: 1, testament: 'NT' },
      { name: 'Apocalypse', chapters: 22, testament: 'NT' }
    ]
  }

  let selectedBooks = []
  
  if (books.includes('OT')) {
    selectedBooks = [...selectedBooks, ...bookDatabase.OT]
  }
  if (books.includes('NT')) {
    selectedBooks = [...selectedBooks, ...bookDatabase.NT]
  }
  if (books.includes('Gospels')) {
    selectedBooks = [...selectedBooks, ...bookDatabase.NT.filter(b => 
      ['Matthieu', 'Marc', 'Luc', 'Jean'].includes(b.name)
    )]
  }
  if (books.includes('Psalms')) {
    selectedBooks = [...selectedBooks, ...bookDatabase.OT.filter(b => b.name === 'Psaumes')]
  }
  if (books.includes('Proverbs')) {
    selectedBooks = [...selectedBooks, ...bookDatabase.OT.filter(b => b.name === 'Proverbes')]
  }

  return selectedBooks
}

// G√©n√©rer les r√©f√©rences pour un jour
function generateDayReferences(availableBooks: any[], parameters: any, dayNumber: number): string[] {
  const references = []
  
  // S√©lectionner un livre al√©atoire
  const randomBook = availableBooks[Math.floor(Math.random() * availableBooks.length)]
  const chapter = Math.floor(Math.random() * randomBook.chapters) + 1
  
  // G√©n√©rer une r√©f√©rence
  if (parameters.order === 'chronological') {
    // Pour l'ordre chronologique, essayer de suivre une progression
    const bookIndex = dayNumber % availableBooks.length
    const selectedBook = availableBooks[bookIndex]
    const chapter = Math.min(Math.floor(dayNumber / availableBooks.length) + 1, selectedBook.chapters)
    references.push(`${selectedBook.name} ${chapter}`)
  } else {
    // Ordre traditionnel ou th√©matique
    references.push(`${randomBook.name} ${chapter}`)
  }
  
  // Ajouter psaume quotidien si demand√©
  if (parameters.includePsalms) {
    const psalmNumber = ((dayNumber - 1) % 150) + 1
    references.push(`Psaume ${psalmNumber}`)
  }
  
  // Ajouter proverbe quotidien si demand√©
  if (parameters.includeProverbs) {
    const proverbChapter = ((dayNumber - 1) % 31) + 1
    references.push(`Proverbes ${proverbChapter}`)
  }
  
  return references
}

// G√©n√©rer un th√®me de m√©ditation
function generateMeditationTheme(parameters: any, dayNumber: number): string {
  const themes = [
    'Paix et s√©r√©nit√©',
    'Amour de Dieu',
    'Sagesse divine',
    'Gr√¢ce et mis√©ricorde',
    'Foi et confiance',
    'Esp√©rance et joie',
    'Pardon et r√©conciliation',
    'Service et humilit√©',
    'Pers√©v√©rance et endurance',
    'Louange et adoration'
  ]
  
  return themes[dayNumber % themes.length]
}

// G√©n√©rer des sujets de pri√®re
function generatePrayerSubjects(parameters: any, dayNumber: number): any[] {
  const subjects = [
    { theme: 'Gratitude', subject: 'Remerciez Dieu pour ses b√©n√©dictions' },
    { theme: 'Gu√©rison', subject: 'Priez pour la gu√©rison de vos proches' },
    { theme: 'Sagesse', subject: 'Demandez la sagesse divine' },
    { theme: 'Paix', subject: 'Priez pour la paix dans votre c≈ìur' },
    { theme: 'Protection', subject: 'Demandez la protection divine' },
    { theme: 'Direction', subject: 'Cherchez la direction de Dieu' },
    { theme: 'Force', subject: 'Demandez la force spirituelle' },
    { theme: 'Pardon', subject: 'Priez pour le pardon' }
  ]
  
  // Retourner 3-5 sujets al√©atoires
  const numSubjects = 3 + (dayNumber % 3)
  const selectedSubjects = []
  
  for (let i = 0; i < numSubjects; i++) {
    const subject = subjects[(dayNumber + i) % subjects.length]
    selectedSubjects.push({
      ...subject,
      color: getRandomColor(),
      validated: false,
      notes: ''
    })
  }
  
  return selectedSubjects
}

// G√©n√©rer un verset √† m√©moriser
function generateMemoryVerse(availableBooks: any[], dayNumber: number): string {
  const verses = [
    'Car Dieu a tant aim√© le monde qu\'il a donn√© son Fils unique, afin que quiconque croit en lui ne p√©risse point, mais qu\'il ait la vie √©ternelle.',
    'Je puis tout par celui qui me fortifie.',
    'L\'√âternel est mon berger: je ne manquerai de rien.',
    'Cherchez premi√®rement le royaume et la justice de Dieu; et toutes ces choses vous seront donn√©es par-dessus.',
    'Car je connais les pens√©es que j\'ai pour vous, dit l\'√âternel, pens√©es de paix et non de malheur, afin de vous donner un avenir et de l\'esp√©rance.',
    'Confie-toi en l\'√âternel de tout ton c≈ìur, et ne t\'appuie pas sur ta sagesse.',
    'L\'amour est patient, il est plein de bont√©; l\'amour n\'est point envieux; l\'amour ne se vante point, il ne s\'enfle point d\'orgueil.',
    'Car nous marchons par la foi et non par la vue.',
    'R√©jouissez-vous toujours dans le Seigneur; je le r√©p√®te, r√©jouissez-vous.',
    'Toutes choses concourent au bien de ceux qui aiment Dieu.'
  ]
  
  return verses[dayNumber % verses.length]
}

// Obtenir une couleur al√©atoire
function getRandomColor(): string {
  const colors = ['blue', 'green', 'purple', 'orange', 'pink', 'cyan', 'lime', 'amber']
  return colors[Math.floor(Math.random() * colors.length)]
}

/* üöÄ Edge Function pour g√©n√©ration de plans 100% locale

Cette fonction g√©n√®re des plans de lecture biblique enti√®rement localement
sans d√©pendance externe, avec:
‚úÖ Support des presets Thompson
‚úÖ Plans personnalis√©s
‚úÖ G√©n√©ration intelligente de r√©f√©rences
‚úÖ Th√®mes de m√©ditation et sujets de pri√®re
‚úÖ Versets √† m√©moriser
‚úÖ Sauvegarde en base de donn√©es

Utilisation depuis Flutter:
Supabase.instance.client.functions.invoke('generate-local-plan', body: {...})
*/
