import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import '../services/semantic_passage_boundary_service.dart';
import '../services/bsb_topical_service.dart';
import '../services/bsb_concordance_service.dart';
import '../services/bible_context_service.dart';
import '../services/bsb_book_outlines_service.dart';
import '../services/biblical_timeline_service.dart';

/// üéØ Page d'√©tude th√©matique - Parcours aventure d'un th√®me biblique
class ThemeStudyPage extends StatefulWidget {
  final String? initialTheme;
  final String? passageRef; // R√©f√©rence de la lecture du jour
  
  const ThemeStudyPage({
    super.key,
    this.initialTheme,
    this.passageRef,
  });

  @override
  State<ThemeStudyPage> createState() => _ThemeStudyPageState();
}

class _ThemeStudyPageState extends State<ThemeStudyPage>
    with TickerProviderStateMixin {
  late TabController _tabController;
  
  // Donn√©es de l'√©tude
  String? _selectedTheme;
  List<String> _availableThemes = [];
  bool _isLoadingThemes = true;
  
  // Donn√©es de progression
  List<Map<String, dynamic>> _themeReferences = [];
  List<Map<String, dynamic>> _concordanceResults = [];
  List<Map<String, dynamic>> _progressionData = [];
  List<Map<String, dynamic>> _bookOutlines = [];
  List<Map<String, dynamic>> _timelineEvents = [];
  
  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 4, vsync: this);
    _loadThemesFromReading();
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  /// üî• Charge les th√®mes depuis la lecture du jour via FalconX
  Future<void> _loadThemesFromReading() async {
    setState(() => _isLoadingThemes = true);
    
    try {
      // 1. Si un th√®me initial est fourni, l'utiliser
      if (widget.initialTheme != null && widget.initialTheme!.isNotEmpty) {
        _selectedTheme = widget.initialTheme;
        await _loadThemeData();
        setState(() => _isLoadingThemes = false);
        return;
      }
      
      // 2. Analyser la lecture du jour avec FalconX
      if (widget.passageRef != null) {
        final themes = await _extractThemesFromPassage(widget.passageRef!);
        if (themes.isNotEmpty) {
          _availableThemes = themes;
          _selectedTheme = themes.first;
          await _loadThemeData();
        }
      }
      
      // 3. Fallback vers th√®mes populaires BSB
      if (_availableThemes.isEmpty) {
        await BSBTopicalService.init();
        _availableThemes = await BSBTopicalService.getPopularThemes();
        if (_availableThemes.isNotEmpty) {
          _selectedTheme = _availableThemes.first;
          await _loadThemeData();
        }
      }
      
    } catch (e) {
      print('‚ùå Erreur chargement th√®mes: $e');
    } finally {
      setState(() => _isLoadingThemes = false);
    }
  }

  /// üß† Extrait les th√®mes d'un passage via FalconX
  Future<List<String>> _extractThemesFromPassage(String passageRef) async {
    try {
      // Extraire livre et chapitre
      final parts = passageRef.split(' ');
      if (parts.length < 2) return [];
      
      final book = parts[0];
      final chapterPart = parts[1].split(':')[0];
      final chapter = int.tryParse(chapterPart);
      if (chapter == null) return [];
      
      // Utiliser FalconX pour analyser le passage
      final unit = SemanticPassageBoundaryService.findUnitContaining(book, chapter);
      if (unit == null) return [];
      
      List<String> themes = [];
      
      // 1. Th√®me principal de l'unit√© s√©mantique
      if (unit.theme != null && unit.theme!.isNotEmpty) {
        themes.add(unit.theme!);
      }
      
      // 2. Th√®mes des tons √©motionnels
      if (unit.emotionalTones != null) {
        themes.addAll(unit.emotionalTones!);
      }
      
      // 3. Th√®mes du contexte liturgique
      if (unit.liturgicalContext != null && unit.liturgicalContext!.isNotEmpty) {
        themes.add(unit.liturgicalContext!);
      }
      
      // 4. Rechercher des th√®mes BSB li√©s
      await BSBTopicalService.init();
      for (final theme in themes) {
        final bsbThemes = await BSBTopicalService.searchPartialTheme(theme);
        if (bsbThemes.isNotEmpty) {
          themes.addAll(bsbThemes.take(2));
        }
      }
      
      return themes.toSet().toList(); // Supprimer les doublons
      
    } catch (e) {
      print('‚ùå Erreur extraction th√®mes FalconX: $e');
      return [];
    }
  }

  /// üìö Charge les donn√©es compl√®tes du th√®me s√©lectionn√©
  Future<void> _loadThemeData() async {
    if (_selectedTheme == null) return;
    
    try {
      // Charger les r√©f√©rences du th√®me
      final references = await BSBTopicalService.searchThemeReferences(_selectedTheme!);
      _themeReferences = references;
      
      // Charger les r√©sultats de concordance
      final concordanceResults = await BSBConcordanceService.searchPartial(_selectedTheme!);
      _concordanceResults = concordanceResults.map((word) => {
        'word': word,
        'count': 1, // Placeholder
      }).toList();
      
      // G√©n√©rer la progression chronologique
      _progressionData = _generateProgressionData();
      
      // Charger les plans de livres BSB
      await _loadBookOutlines();
      
      // Charger les √©v√©nements chronologiques
      await _loadTimelineEvents();
      
    } catch (e) {
      print('‚ùå Erreur chargement donn√©es th√®me: $e');
    }
  }

  /// üìà G√©n√®re les donn√©es de progression chronologique
  List<Map<String, dynamic>> _generateProgressionData() {
    if (_themeReferences.isEmpty) return [];
    
    // Grouper par livre et ordre chronologique
    final Map<String, List<Map<String, dynamic>>> groupedByBook = {};
    
    for (final ref in _themeReferences) {
      final book = ref['book'] as String? ?? '';
      if (!groupedByBook.containsKey(book)) {
        groupedByBook[book] = [];
      }
      groupedByBook[book]!.add(ref);
    }
    
    // Ordre chronologique des livres bibliques
    const chronologicalOrder = [
      'Gen√®se', 'Exode', 'L√©vitique', 'Nombres', 'Deut√©ronome',
      'Josu√©', 'Juges', 'Ruth', '1 Samuel', '2 Samuel',
      '1 Rois', '2 Rois', '1 Chroniques', '2 Chroniques',
      'Esdras', 'N√©h√©mie', 'Esther', 'Job', 'Psaumes',
      'Proverbes', 'Eccl√©siaste', 'Cantique des Cantiques',
      '√âsa√Øe', 'J√©r√©mie', 'Lamentations', '√âz√©chiel', 'Daniel',
      'Os√©e', 'Jo√´l', 'Amos', 'Abdias', 'Jonas',
      'Mich√©e', 'Nahum', 'Habacuc', 'Sophonie', 'Agg√©e',
      'Zacharie', 'Malachie', 'Matthieu', 'Marc', 'Luc',
      'Jean', 'Actes', 'Romains', '1 Corinthiens', '2 Corinthiens',
      'Galates', '√âph√©siens', 'Philippiens', 'Colossiens',
      '1 Thessaloniciens', '2 Thessaloniciens', '1 Timoth√©e',
      '2 Timoth√©e', 'Tite', 'Phil√©mon', 'H√©breux', 'Jacques',
      '1 Pierre', '2 Pierre', '1 Jean', '2 Jean', '3 Jean',
      'Jude', 'Apocalypse'
    ];
    
    List<Map<String, dynamic>> progression = [];
    
    for (final book in chronologicalOrder) {
      if (groupedByBook.containsKey(book)) {
        final bookRefs = groupedByBook[book]!;
        progression.add({
          'book': book,
          'references': bookRefs,
          'count': bookRefs.length,
          'period': _getBiblicalPeriod(book),
        });
      }
    }
    
    return progression;
  }

  /// üìÖ D√©termine la p√©riode biblique d'un livre
  String _getBiblicalPeriod(String book) {
    const periods = {
      'Gen√®se': 'Patriarches',
      'Exode': 'Patriarches',
      'L√©vitique': 'Patriarches',
      'Nombres': 'Patriarches',
      'Deut√©ronome': 'Patriarches',
      'Josu√©': 'Conqu√™te',
      'Juges': 'Juges',
      'Ruth': 'Juges',
      '1 Samuel': 'Royaume uni',
      '2 Samuel': 'Royaume uni',
      '1 Rois': 'Royaume divis√©',
      '2 Rois': 'Royaume divis√©',
      '1 Chroniques': 'Royaume divis√©',
      '2 Chroniques': 'Royaume divis√©',
      'Esdras': 'Exil et retour',
      'N√©h√©mie': 'Exil et retour',
      'Esther': 'Exil et retour',
      'Job': 'Sagesse',
      'Psaumes': 'Sagesse',
      'Proverbes': 'Sagesse',
      'Eccl√©siaste': 'Sagesse',
      'Cantique des Cantiques': 'Sagesse',
      '√âsa√Øe': 'Proph√®tes majeurs',
      'J√©r√©mie': 'Proph√®tes majeurs',
      'Lamentations': 'Proph√®tes majeurs',
      '√âz√©chiel': 'Proph√®tes majeurs',
      'Daniel': 'Proph√®tes majeurs',
      'Os√©e': 'Proph√®tes mineurs',
      'Jo√´l': 'Proph√®tes mineurs',
      'Amos': 'Proph√®tes mineurs',
      'Abdias': 'Proph√®tes mineurs',
      'Jonas': 'Proph√®tes mineurs',
      'Mich√©e': 'Proph√®tes mineurs',
      'Nahum': 'Proph√®tes mineurs',
      'Habacuc': 'Proph√®tes mineurs',
      'Sophonie': 'Proph√®tes mineurs',
      'Agg√©e': 'Proph√®tes mineurs',
      'Zacharie': 'Proph√®tes mineurs',
      'Malachie': 'Proph√®tes mineurs',
      'Matthieu': 'Nouveau Testament',
      'Marc': 'Nouveau Testament',
      'Luc': 'Nouveau Testament',
      'Jean': 'Nouveau Testament',
      'Actes': 'Nouveau Testament',
      'Romains': 'Nouveau Testament',
      '1 Corinthiens': 'Nouveau Testament',
      '2 Corinthiens': 'Nouveau Testament',
      'Galates': 'Nouveau Testament',
      '√âph√©siens': 'Nouveau Testament',
      'Philippiens': 'Nouveau Testament',
      'Colossiens': 'Nouveau Testament',
      '1 Thessaloniciens': 'Nouveau Testament',
      '2 Thessaloniciens': 'Nouveau Testament',
      '1 Timoth√©e': 'Nouveau Testament',
      '2 Timoth√©e': 'Nouveau Testament',
      'Tite': 'Nouveau Testament',
      'Phil√©mon': 'Nouveau Testament',
      'H√©breux': 'Nouveau Testament',
      'Jacques': 'Nouveau Testament',
      '1 Pierre': 'Nouveau Testament',
      '2 Pierre': 'Nouveau Testament',
      '1 Jean': 'Nouveau Testament',
      '2 Jean': 'Nouveau Testament',
      '3 Jean': 'Nouveau Testament',
      'Jude': 'Nouveau Testament',
      'Apocalypse': 'Nouveau Testament',
    };
    
    return periods[book] ?? 'Inconnue';
  }

  /// üìö Charge les plans de livres BSB pour le th√®me
  Future<void> _loadBookOutlines() async {
    if (_selectedTheme == null) return;
    
    try {
      await BSBBookOutlinesService.init();
      
      // Rechercher les livres qui contiennent ce th√®me
      final books = await BSBBookOutlinesService.searchBooksByTheme(_selectedTheme!);
      final outlines = <Map<String, dynamic>>[];
      
      for (final book in books) {
        final sections = await BSBBookOutlinesService.getSectionsForTheme(book, _selectedTheme!);
        if (sections.isNotEmpty) {
          outlines.add({
            'book': book,
            'sections': sections,
            'sectionCount': sections.length,
          });
        }
      }
      
      _bookOutlines = outlines;
    } catch (e) {
      print('‚ùå Erreur chargement plans de livres: $e');
    }
  }

  /// ‚è∞ Charge les √©v√©nements chronologiques pour le th√®me
  Future<void> _loadTimelineEvents() async {
    if (_selectedTheme == null) return;
    
    try {
      await BiblicalTimelineService.init();
      
      // Obtenir la chronologie du th√®me
      final events = await BiblicalTimelineService.getThemeTimeline(_selectedTheme!);
      _timelineEvents = events;
    } catch (e) {
      print('‚ùå Erreur chargement chronologie: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [Color(0xFF1A1D29), Color(0xFF112244)],
          ),
        ),
        child: SafeArea(
          child: Column(
            children: [
              Expanded(
                child: SingleChildScrollView(
                  physics: const BouncingScrollPhysics(),
                  keyboardDismissBehavior: ScrollViewKeyboardDismissBehavior.onDrag,
                  child: Stack(
                    children: [
                      // Ornements l√©gers en arri√®re-plan
                      Positioned(
                        right: -60,
                        top: -40,
                        child: _softBlob(180),
                      ),
                      Positioned(
                        left: -40,
                        bottom: -50,
                        child: _softBlob(220),
                      ),

                      // Contenu principal
                      Padding(
                        padding: const EdgeInsets.all(20),
                        child: ClipRRect(
                          borderRadius: BorderRadius.circular(20),
                          child: BackdropFilter(
                            filter: ImageFilter.blur(sigmaX: 14, sigmaY: 14),
                            child: Container(
                              padding: const EdgeInsets.all(20),
                              decoration: BoxDecoration(
                                color: Colors.white.withOpacity(0.12),
                                borderRadius: BorderRadius.circular(20),
                                border: Border.all(
                                  color: Colors.white.withOpacity(0.2),
                                  width: 1,
                                ),
                              ),
                              child: Column(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  const SizedBox(height: 8),
                                  // Header
                                  _buildHeader(),
                                  const SizedBox(height: 20),
                                  // S√©lecteur de th√®mes
                                  _buildThemeSelector(),
                                  const SizedBox(height: 20),
                                  // Barre d'onglets
                                  _buildTabBar(),
                                  const SizedBox(height: 20),
                                  // Contenu des onglets
                                  SizedBox(
                                    height: 400,
                                    child: TabBarView(
                                      controller: _tabController,
                                      children: [
                                        _buildReferencesTab(),
                                        _buildConcordanceTab(),
                                        _buildProgressionTab(),
                                        _buildTimelineTab(),
                                      ],
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildHeader() {
    return Row(
      children: [
        GestureDetector(
          onTap: () => Navigator.pop(context),
          child: Container(
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: Colors.white.withOpacity(0.2)),
            ),
            child: const Icon(
              Icons.arrow_back_ios,
              color: Colors.white,
              size: 20,
            ),
          ),
        ),
        const SizedBox(width: 16),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text(
                '√âTUDE TH√âMATIQUE',
                style: TextStyle(
                  fontFamily: 'Gilroy',
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 8),
              const Text(
                'Parcours aventure d\'un th√®me biblique',
                style: TextStyle(
                  fontFamily: 'Gilroy',
                  fontSize: 14,
                  color: Colors.white70,
                  height: 1.3,
                ),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildThemeSelector() {
    if (_isLoadingThemes) {
      return Container(
        padding: const EdgeInsets.all(20),
        child: const Center(
          child: CircularProgressIndicator(color: Colors.white),
        ),
      );
    }

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Row(
          children: [
            Icon(Icons.auto_awesome, color: Colors.white70, size: 18),
            SizedBox(width: 8),
            Text(
              'Th√®mes identifi√©s dans votre lecture:',
              style: TextStyle(
                fontFamily: 'Gilroy',
                color: Colors.white,
                fontSize: 14,
                fontWeight: FontWeight.w500,
              ),
            ),
          ],
        ),
        const SizedBox(height: 12),
        Wrap(
          spacing: 8,
          runSpacing: 8,
          children: _availableThemes.map((theme) => GestureDetector(
            onTap: () {
              setState(() {
                _selectedTheme = theme;
              });
              _loadThemeData();
            },
            child: Container(
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              decoration: BoxDecoration(
                color: _selectedTheme == theme 
                    ? const Color(0xFF1553FF)
                    : Colors.white.withOpacity(0.10),
                borderRadius: BorderRadius.circular(20),
                border: Border.all(
                  color: _selectedTheme == theme 
                      ? const Color(0xFF1553FF)
                      : Colors.white.withOpacity(0.20),
                ),
              ),
              child: Text(
                theme,
                style: const TextStyle(
                  fontFamily: 'Gilroy',
                  fontSize: 12,
                  fontWeight: FontWeight.w600,
                  color: Colors.white,
                ),
              ),
            ),
          )).toList(),
        ),
      ],
    );
  }

  Widget _buildTabBar() {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.10),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.white.withOpacity(0.20)),
      ),
      child: TabBar(
        controller: _tabController,
        indicator: BoxDecoration(
          color: const Color(0xFF1553FF),
          borderRadius: BorderRadius.circular(12),
        ),
        labelColor: Colors.white,
        unselectedLabelColor: Colors.white70,
        labelStyle: const TextStyle(
          fontFamily: 'Gilroy',
          fontWeight: FontWeight.w600,
          fontSize: 12,
        ),
        unselectedLabelStyle: const TextStyle(
          fontFamily: 'Gilroy',
          fontWeight: FontWeight.w500,
          fontSize: 12,
        ),
        tabs: const [
          Tab(text: 'R√©f√©rences'),
          Tab(text: 'Concordance'),
          Tab(text: 'Progression'),
          Tab(text: 'Chronologie'),
        ],
      ),
    );
  }

  Widget _buildReferencesTab() {
    return ListView.builder(
      itemCount: _themeReferences.length,
      itemBuilder: (context, index) {
        final ref = _themeReferences[index];
        return Container(
          margin: const EdgeInsets.only(bottom: 12),
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.white.withOpacity(0.10),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: Colors.white.withOpacity(0.20)),
          ),
          child: Row(
            children: [
              const Icon(
                Icons.book,
                color: Color(0xFF1553FF),
                size: 20,
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Text(
                  ref['reference'] ?? '',
                  style: const TextStyle(
                    fontFamily: 'Gilroy',
                    fontSize: 14,
                    fontWeight: FontWeight.w600,
                    color: Colors.white,
                  ),
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildConcordanceTab() {
    return ListView.builder(
      itemCount: _concordanceResults.length,
      itemBuilder: (context, index) {
        final result = _concordanceResults[index];
        return Container(
          margin: const EdgeInsets.only(bottom: 12),
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.white.withOpacity(0.10),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: Colors.white.withOpacity(0.20)),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                result['word'] ?? '',
                style: const TextStyle(
                  fontFamily: 'Gilroy',
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: Color(0xFF1553FF),
                ),
              ),
              const SizedBox(height: 8),
              Text(
                '${result['count'] ?? 0} occurrences',
                style: const TextStyle(
                  fontFamily: 'Gilroy',
                  fontSize: 12,
                  color: Colors.white70,
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildProgressionTab() {
    return ListView.builder(
      itemCount: _progressionData.length,
      itemBuilder: (context, index) {
        final period = _progressionData[index];
        return Container(
          margin: const EdgeInsets.only(bottom: 16),
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.white.withOpacity(0.10),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: Colors.white.withOpacity(0.20)),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  const Icon(
                    Icons.timeline,
                    color: Color(0xFF1553FF),
                    size: 20,
                  ),
                  const SizedBox(width: 8),
                  Text(
                    period['book'] ?? '',
                    style: const TextStyle(
                      fontFamily: 'Gilroy',
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                  const Spacer(),
                  Text(
                    '${period['count'] ?? 0} refs',
                    style: const TextStyle(
                      fontFamily: 'Gilroy',
                      fontSize: 12,
                      color: Colors.white70,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 8),
              Text(
                period['period'] ?? '',
                style: const TextStyle(
                  fontFamily: 'Gilroy',
                  fontSize: 12,
                  color: Color(0xFF1553FF),
                  fontWeight: FontWeight.w600,
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildTimelineTab() {
    return ListView.builder(
      itemCount: _timelineEvents.length,
      itemBuilder: (context, index) {
        final event = _timelineEvents[index];
        return Container(
          margin: const EdgeInsets.only(bottom: 16),
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.white.withOpacity(0.10),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: Colors.white.withOpacity(0.20)),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  const Icon(
                    Icons.event,
                    color: Color(0xFF1553FF),
                    size: 20,
                  ),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      event['title'] ?? '',
                      style: const TextStyle(
                        fontFamily: 'Gilroy',
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                      ),
                    ),
                  ),
                  Text(
                    '${event['year'] ?? ''}',
                    style: const TextStyle(
                      fontFamily: 'Gilroy',
                      fontSize: 12,
                      color: Colors.white70,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 8),
              Text(
                event['description'] ?? '',
                style: const TextStyle(
                  fontFamily: 'Gilroy',
                  fontSize: 12,
                  color: Colors.white70,
                ),
              ),
              const SizedBox(height: 8),
              Row(
                children: [
                  const Icon(
                    Icons.book,
                    color: Colors.white54,
                    size: 16,
                  ),
                  const SizedBox(width: 4),
                  Text(
                    event['reference'] ?? '',
                    style: const TextStyle(
                      fontFamily: 'Gilroy',
                      fontSize: 10,
                      color: Colors.white54,
                    ),
                  ),
                  const Spacer(),
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                    decoration: BoxDecoration(
                      color: const Color(0xFF1553FF).withOpacity(0.2),
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Text(
                      event['period'] ?? '',
                      style: const TextStyle(
                        fontFamily: 'Gilroy',
                        fontSize: 10,
                        color: Color(0xFF1553FF),
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _softBlob(double size) {
    return Container(
      width: size,
      height: size,
      decoration: BoxDecoration(
        shape: BoxShape.circle,
        gradient: RadialGradient(
          colors: [Colors.white.withOpacity(0.20), Colors.transparent],
        ),
      ),
    );
  }
}
