import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import '../services/notification_service.dart';
import '../services/daily_scheduler.dart';
import '../services/cross_platform_alarm_service.dart';
import '../services/user_prefs_sync.dart'; // ‚úÖ UserPrefs ESSENTIEL (offline-first)
import '../services/version_change_notifier.dart';
import '../bootstrap.dart' as bootstrap;
import '../services/intelligent_duration_calculator.dart'; // üß† IntelligentDurationCalculator
import '../repositories/user_repository.dart';
import '../widgets/bible_version_selector.dart';
import '../services/bible_version_manager.dart';

class CompleteProfilePage extends StatefulWidget {
  const CompleteProfilePage({super.key});

  @override
  State<CompleteProfilePage> createState() => _CompleteProfilePageState();
}

class _CompleteProfilePageState extends State<CompleteProfilePage> {
  // S√©lections
  String? selectedBibleVersion;
  int durationMin = 15;
  TimeOfDay reminder = const TimeOfDay(hour: 7, minute: 0);
  String goal = 'Rencontrer J√©sus dans la Parole';
  String level = 'Fid√®le r√©gulier';
  String meditation = 'M√©ditation profonde : Temps de r√©flexion entre les versets';
  bool autoReminder = true;
  bool isLoading = false; // ‚Üê Indicateur de chargement
  
  // ‚ïê‚ïê‚ïê G√©n√©rateur Ultime (Jean 5:40) ‚ïê‚ïê‚ïê
  String heartPosture = '√âcouter la voix de Dieu';
  String motivation = 'Recherche de direction';
  

  final goals = const [
    // ‚ïê‚ïê‚ïê Objectifs Christ-centr√©s (Jean 5:40) ‚ïê‚ïê‚ïê
    'Rencontrer J√©sus dans la Parole',
    'Voir J√©sus dans chaque livre',
    '√ätre transform√© √† son image',
    'D√©velopper l\'intimit√© avec Dieu',
    'Apprendre √† prier comme J√©sus',
    'Reconna√Ætre la voix de Dieu',
    'D√©velopper le fruit de l\'Esprit',
    'Renouveler mes pens√©es',
    'Marcher par l\'Esprit',
    
    // Existants
    'Discipline quotidienne',
    'Discipline de pri√®re',
    'Approfondir la Parole',
    'Grandir dans la foi',
    'D√©velopper mon caract√®re',
    'Trouver de l\'encouragement',
    'Exp√©rimenter la gu√©rison',
    'Partager ma foi',
    'T√©moigner avec audace',
    '√âvang√©liser en ligne',
    'Mieux prier',
    'Sagesse',
  ];
  
  final levels = const [
    'Nouveau converti',
    'R√©trograde',
    'Fid√®le pas si r√©gulier',
    'Fid√®le r√©gulier',
    'Serviteur/leader',
  ];
  
  final meditations = const [
    'M√©ditation profonde : Temps de r√©flexion entre les versets',
    'Pri√®re : Pauses pour prier',
    'Application : Temps pour r√©fl√©chir √† l\'application',
    'M√©morisation : R√©p√©tition des versets cl√©s',
  ];
  
  // ‚ïê‚ïê‚ïê Posture du c≈ìur (Jean 5:40) ‚ïê‚ïê‚ïê
  final heartPostures = const [
    'Rencontrer J√©sus personnellement',
    '√ätre transform√© par l\'Esprit',
    '√âcouter la voix de Dieu',
    'Approfondir ma connaissance',
    'Recevoir la puissance de l\'Esprit',
    'D√©velopper l\'intimit√© avec le P√®re',
  ];
  
  // ‚ïê‚ïê‚ïê Motivation spirituelle (H√©breux 11:6) ‚ïê‚ïê‚ïê
  final spiritualMotivations = const [
    'Passion pour Christ',
    'Amour pour Dieu',
    'Ob√©issance joyeuse',
    'D√©sir de conna√Ætre Dieu',
    'Besoin de transformation',
    'Recherche de direction',
    'Discipline spirituelle',
  ];


  @override
  void initState() {
    super.initState();
    _loadSavedPreferences(); // ‚úÖ Charger les pr√©f√©rences sauvegard√©es
    _calculateDurationRecommendations(); // üß† Calculer les recommandations
  }
  
  /// üß† Calcule les recommandations de dur√©e pour diff√©rents objectifs
  Future<void> _calculateDurationRecommendations() async {
    // Calcul silencieux en arri√®re-plan pour les syst√®mes intelligents
    try {
      for (final goalOption in goals) {
        IntelligentDurationCalculator.calculateOptimalDuration(
          goal: goalOption,
          level: level,
          dailyMinutes: durationMin,
          meditationType: meditation,
        );
      }
      print('üß† Recommandations calcul√©es en arri√®re-plan');
    } catch (e) {
      print('‚ùå Erreur calcul recommandations: $e');
    }
  }
  
  /// ‚úÖ Charger les pr√©f√©rences sauvegard√©es depuis UserPrefsHive (syst√®me unifi√©)
  Future<void> _loadSavedPreferences() async {
    try {
      // ‚úÖ Synchroniser d'abord les deux syst√®mes
      await UserPrefsSync.syncBidirectional();
      
      // ‚úÖ Utiliser UserPrefsHive comme source principale (comme profile_settings_page)
      final prefs = bootstrap.userPrefs;
      final profile = prefs.profile;
      
      if (profile.isEmpty) {
        print('‚ÑπÔ∏è Aucune pr√©f√©rence sauvegard√©e');
        return;
      }
      
      setState(() {
        // Charger tous les param√®tres sauvegard√©s depuis UserPrefsHive
        selectedBibleVersion = profile['bibleVersion'] as String? ?? 'lsg1910';
        durationMin = profile['durationMin'] as int? ?? 15;
        
        // Charger l'heure du rappel
        final reminderHour = profile['reminderHour'] as int? ?? 7;
        final reminderMinute = profile['reminderMinute'] as int? ?? 0;
        reminder = TimeOfDay(hour: reminderHour, minute: reminderMinute);
        
        autoReminder = profile['autoReminder'] as bool? ?? true;
        goal = profile['goal'] as String? ?? 'Rencontrer J√©sus dans la Parole';
        final rawLevel = profile['level'] as String? ?? 'Fid√®le r√©gulier';
        // ‚úÖ Corriger l'incoh√©rence "R√©trogarde" vs "R√©trograde"
        level = rawLevel == 'R√©trogarde' ? 'R√©trograde' : rawLevel;
        // ‚úÖ Corriger les anciennes valeurs de m√©ditation vers les nouvelles
        final rawMeditation = profile['meditation'] as String? ?? 'M√©ditation profonde : Temps de r√©flexion entre les versets';
        meditation = _normalizeMeditationType(rawMeditation);
        
        // ‚úÖ Charger les nouveaux champs (G√©n√©rateur Ultime)
        heartPosture = profile['heartPosture'] as String? ?? '√âcouter la voix de Dieu';
        motivation = profile['motivation'] as String? ?? 'Recherche de direction';
      });
      
      print('‚úÖ Pr√©f√©rences charg√©es depuis UserPrefsHive (syst√®me unifi√©)');
    } catch (e) {
      print('‚ö†Ô∏è Erreur chargement pr√©f√©rences: $e');
      // Continuer avec les valeurs par d√©faut
    }
  }
  

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [Color(0xFF1A1D29), Color(0xFF112244)],
          ),
        ),
        child: SafeArea(
          child: Column(
            children: [
              Expanded(
                child: SingleChildScrollView(
                  physics: const BouncingScrollPhysics(),
                  keyboardDismissBehavior: ScrollViewKeyboardDismissBehavior.onDrag,
                  child: Stack(
                    children: [
                      // Ornements l√©gers en arri√®re-plan
                      Positioned(
                        right: -60,
                        top: -40,
                        child: _softBlob(180),
                      ),
                      Positioned(
                        left: -40,
                        bottom: -50,
                        child: _softBlob(220),
                      ),

                      // Contenu principal
                      Padding(
                        padding: const EdgeInsets.all(20),
                        child: ClipRRect(
                          borderRadius: BorderRadius.circular(20),
                          child: BackdropFilter(
                            filter: ImageFilter.blur(sigmaX: 14, sigmaY: 14),
                            child: Container(
                              padding: const EdgeInsets.all(20),
                              decoration: BoxDecoration(
                                color: Colors.white.withOpacity(0.12),
                                borderRadius: BorderRadius.circular(20),
                                border: Border.all(
                                  color: Colors.white.withOpacity(0.2),
                                  width: 1,
                                ),
                              ),
                              child: Column(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  const SizedBox(height: 8),
                                  // Header
                                  _buildHeader(),
                                  const SizedBox(height: 20),

                                  // Formulaire de configuration
                                  _buildConfigurationForm(),
                                  const SizedBox(height: 100), // ‚úÖ Espace pour le bouton fix√©
                                ],
                              ),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
      // Bouton principal (fix√© en bas de l'√©cran)
      bottomNavigationBar: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [
              Colors.transparent,
              const Color(0xFF1A1D29).withOpacity(0.9),
              const Color(0xFF1A1D29),
            ],
          ),
        ),
        child: SafeArea(
          child: Padding(
            padding: const EdgeInsets.fromLTRB(20, 10, 20, 20),
            child: _buildContinueButton(),
          ),
        ),
      ),
    );
  }

  Widget _buildHeader() {
    return const Column(
      children: [
        Text(
          'PERSONNALISE TON PARCOURS',
          style: TextStyle(
            fontFamily: 'Gilroy',
            fontSize: 24,
            fontWeight: FontWeight.bold,
            color: Colors.white,
          ),
          textAlign: TextAlign.center,
        ),
        SizedBox(height: 8),
        Text(
          'Configure tes pr√©f√©rences pour une exp√©rience sur mesure',
          style: TextStyle(
            fontFamily: 'Gilroy',
            fontSize: 14,
            color: Colors.white70,
            height: 1.3,
          ),
          textAlign: TextAlign.center,
        ),
      ],
    );
  }

  Widget _buildConfigurationForm() {
    return Column(
      children: [
        // Version de la Bible
        _buildField(
          label: 'Version de la Bible',
          icon: Icons.menu_book_rounded,
          child: BibleVersionSelector(
            selectedVersion: selectedBibleVersion,
            onVersionChanged: (version) {
              setState(() {
                selectedBibleVersion = version;
              });
            },
            label: 'Version de la Bible',
            showLabel: false,
          ),
        ),

        const SizedBox(height: 16),

        // Dur√©e quotidienne
        _buildField(
          label: 'Dur√©e quotidienne ($durationMin min)',
          icon: Icons.timer_outlined,
          child: _buildDurationSlider(),
        ),

        const SizedBox(height: 16),
        
        // üß† Section de recommandations intelligentes
        _buildIntelligenceRecommendations(),
        
        const SizedBox(height: 16),

        // Rappels quotidiens
        _buildField(
          label: 'Rappels quotidiens',
          icon: Icons.notifications_active_outlined,
          child: _buildSwitchTile(),
        ),

        if (autoReminder) ...[
          const SizedBox(height: 16),
          _buildField(
            label: 'Heure du rappel',
            icon: Icons.access_time,
            child: _buildTimePicker(),
          ),
        ],

        const SizedBox(height: 16),

        // Objectif spirituel
        _buildField(
          label: 'Objectif spirituel',
          icon: Icons.flag_outlined,
          child: _buildDropdown(
            value: goal,
            items: goals,
            onChanged: (v) {
              setState(() => goal = v);
              // üß† Recalculer les recommandations quand l'objectif change
              _calculateDurationRecommendations();
            },
          ),
        ),

        const SizedBox(height: 16),

        // Niveau spirituel
        _buildField(
          label: 'Niveau spirituel',
          icon: Icons.trending_up_rounded,
          child: _buildDropdown(
            value: level,
            items: levels,
            onChanged: (v) => setState(() => level = v),
          ),
        ),

        const SizedBox(height: 16),

        // ‚ïê‚ïê‚ïê NOUVEAU ! Posture du c≈ìur (Jean 5:40) ‚ïê‚ïê‚ïê
        _buildField(
          label: 'Posture du c≈ìur (Jean 5:40)',
          icon: Icons.favorite_rounded,
          child: _buildDropdown(
            value: heartPosture,
            items: heartPostures,
            onChanged: (v) => setState(() => heartPosture = v),
          ),
        ),

        const SizedBox(height: 16),

        // ‚ïê‚ïê‚ïê NOUVEAU ! Motivation spirituelle ‚ïê‚ïê‚ïê
        _buildField(
          label: 'Motivation spirituelle',
          icon: Icons.local_fire_department_rounded,
          child: _buildDropdown(
            value: motivation,
            items: spiritualMotivations,
            onChanged: (v) => setState(() => motivation = v),
          ),
        ),

        const SizedBox(height: 16),

        // M√©thode de m√©ditation
        _buildField(
          label: 'M√©thode de m√©ditation',
          icon: Icons.spa_outlined,
          child: _buildDropdown(
            value: meditation,
            items: meditations,
            onChanged: (v) => setState(() => meditation = v),
          ),
        ),
      ],
    );
  }

  Widget _buildField({
    required String label,
    required IconData icon,
    required Widget child,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Icon(icon, color: Colors.white70, size: 18),
            const SizedBox(width: 8),
            Text(
              label,
              style: const TextStyle(
                fontFamily: 'Gilroy',
                color: Colors.white,
                fontSize: 14,
                fontWeight: FontWeight.w500,
              ),
            ),
          ],
        ),
        const SizedBox(height: 8),
        child,
      ],
    );
  }

  Widget _buildDropdown({
    required String value,
    required List<String> items,
    required Function(String) onChanged,
  }) {
    return Container(
      height: 48, // Hauteur r√©duite pour Android
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.10),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.white.withOpacity(0.20)),
      ),
      child: DropdownButtonHideUnderline(
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 6), // Padding encore plus r√©duit pour Android
          child: DropdownButton<String>(
            value: value,
            dropdownColor: const Color(0xFF2D1B69),
            style: const TextStyle(
              fontFamily: 'Gilroy',
              color: Colors.white,
              fontSize: 12,
            ),
            isExpanded: true,
            items: items.map((e) => DropdownMenuItem(
              value: e,
              child: Container(
                constraints: const BoxConstraints(maxWidth: 280),
                child: Text(
                  e,
                  style: const TextStyle(
                    fontFamily: 'Gilroy',
                    color: Colors.white,
                    fontSize: 11,
                  ),
                  overflow: TextOverflow.ellipsis,
                  maxLines: 1,
                ),
              ),
            )).toList(),
            onChanged: (v) {
              if (v != null) onChanged(v);
            },
          ),
        ),
      ),
    );
  }

  Widget _buildDurationSlider() {
    return Container(
      height: 48, // Hauteur r√©duite pour Android
      padding: const EdgeInsets.symmetric(horizontal: 10), // Padding r√©duit pour Android
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.10),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.white.withOpacity(0.20)),
      ),
      child: Center(
        child: SliderTheme(
          data: SliderTheme.of(context).copyWith(
            activeTrackColor: Colors.white,
            inactiveTrackColor: Colors.white.withOpacity(0.3),
            thumbColor: const Color(0xFF1553FF),
            overlayColor: const Color(0xFF1553FF).withOpacity(0.2),
            thumbShape: const RoundSliderThumbShape(enabledThumbRadius: 8),
          ),
          child: Slider(
            value: durationMin.toDouble(),
            min: 5,
            max: 60,
            divisions: 11,
            label: '$durationMin min',
            onChanged: (v) {
              setState(() => durationMin = v.round());
              // üß† Recalculer les recommandations quand la dur√©e change
              _calculateDurationRecommendations();
            },
          ),
        ),
      ),
    );
  }
  
  // Les syst√®mes intelligents travaillent en arri√®re-plan sans interface visible
  Widget _buildIntelligenceRecommendations() {
    return SizedBox.shrink(); // Pas d'interface visible
  }
  
  
  Widget _buildSwitchTile() {
    return Container(
      height: 48, // Hauteur r√©duite pour Android
      padding: const EdgeInsets.symmetric(horizontal: 10), // Padding r√©duit pour Android
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.10),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.white.withOpacity(0.20)),
      ),
      child: Center(
        child: Row(
          children: [
            const Expanded(
              child: Text(
                'Recevoir des rappels quotidiens',
                style: TextStyle(
                  fontFamily: 'Gilroy',
                  color: Colors.white,
                  fontSize: 14,
                  fontWeight: FontWeight.w500,
                ),
              ),
            ),
            Switch(
              value: autoReminder,
              onChanged: (v) => setState(() => autoReminder = v),
              activeThumbColor: const Color(0xFF1553FF),
              activeTrackColor: const Color(0xFF1553FF).withOpacity(0.3),
              inactiveThumbColor: Colors.white70,
              inactiveTrackColor: Colors.white.withOpacity(0.3),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTimePicker() {
    return Container(
      height: 48, // Hauteur r√©duite pour Android
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.10),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.white.withOpacity(0.20)),
      ),
      child: InkWell(
        onTap: () async {
          final t = await showTimePicker(
            context: context,
            initialTime: reminder,
          );
          if (t != null) setState(() => reminder = t);
        },
        borderRadius: BorderRadius.circular(12),
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 10), // Padding r√©duit pour Android
          child: Center(
            child: Row(
              children: [
                const Icon(Icons.access_time, color: Colors.white70, size: 18),
                const SizedBox(width: 8),
                const Expanded(
                  child: Text(
                    'Heure du rappel',
                    style: TextStyle(
                      fontFamily: 'Gilroy',
                      color: Colors.white70,
                      fontSize: 14,
                    ),
                  ),
                ),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    color: Colors.white.withOpacity(0.2),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Text(
                    _fmt(reminder),
                    style: const TextStyle(
                      fontFamily: 'Gilroy',
                      color: Colors.white,
                      fontSize: 14,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildContinueButton() {
    return SizedBox(
      width: double.infinity,
      child: Container(
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(12),
          gradient: const LinearGradient(
            colors: [
              Color(0xFF1553FF),
              Color(0xFF0D47A1),
            ],
          ),
          boxShadow: [
            BoxShadow(
              color: const Color(0xFF1553FF).withOpacity(0.3),
              blurRadius: 20,
              offset: const Offset(0, 8),
            ),
          ],
        ),
        child: ElevatedButton(
          onPressed: isLoading ? null : _onContinue,
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.transparent,
            foregroundColor: Colors.white,
            elevation: 0,
            shadowColor: Colors.transparent,
            padding: const EdgeInsets.symmetric(vertical: 16),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
          ),
          child: isLoading
              ? const Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    SizedBox(
                      width: 20,
                      height: 20,
                      child: CircularProgressIndicator(
                        strokeWidth: 2,
                        valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                      ),
                    ),
                    SizedBox(width: 12),
                    Text(
                      'Configuration...',
                      style: TextStyle(
                        fontFamily: 'Gilroy',
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                        color: Colors.white,
                      ),
                    ),
                  ],
                )
              : const Text(
                  'Continuer',
                  style: TextStyle(
                    fontFamily: 'Gilroy',
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                    color: Colors.white,
                  ),
                ),
        ),
      ),
    );
  }

  Widget _softBlob(double size) {
    return Container(
      width: size,
      height: size,
      decoration: BoxDecoration(
        shape: BoxShape.circle,
        gradient: RadialGradient(
          colors: [Colors.white.withOpacity(0.20), Colors.transparent],
        ),
      ),
    );
  }


  Future<void> _onContinue() async {
    if (isLoading) return; // √âviter les clics multiples
    
    setState(() => isLoading = true);
    
    try {
      print('üîÑ D√©but _onContinue()');
      
      // Utiliser la version s√©lectionn√©e
      final bibleVersionCode = selectedBibleVersion ?? 'lsg1910';
      
      print('üìñ Version Bible: $bibleVersionCode');

      // 1) Normaliser les cl√©s attendues par le syst√®me spirituel
      final preferredTime = _fmt(reminder);       // "HH:mm"
      final dailyMinutes = durationMin;           // miroir pour compat
      final correctedLevel = level == 'R√©trogarde' ? 'R√©trograde' : level; // ‚úÖ corrige la valeur

      print('üîß Cl√©s normalis√©es:');
      print('   preferredTime: $preferredTime');
      print('   dailyMinutes: $dailyMinutes');
      print('   level corrig√©: $correctedLevel');

      // 2) Sauvegarde des pr√©f√©rences utilisateur avec toutes les cl√©s (syst√®me unifi√©)
      print('üíæ Sauvegarde profil utilisateur...');
      final payload = {
        'bibleVersion': bibleVersionCode,
        'durationMin': durationMin,
        'dailyMinutes': dailyMinutes,      // ‚úÖ important pour compat
        'preferredTime': preferredTime,    // ‚úÖ important pour timing bonus
        'reminderHour': reminder.hour,
        'reminderMinute': reminder.minute,
        'autoReminder': autoReminder,
        'goal': goal,
        'level': correctedLevel,           // ‚úÖ niveau corrig√©
        'meditation': meditation,
        
        // ‚ïê‚ïê‚ïê NOUVEAU ! G√©n√©rateur Ultime (Jean 5:40) ‚ïê‚ïê‚ïê
        'heartPosture': heartPosture,
        'motivation': motivation,
        
        'daysOfWeek': [1, 2, 3, 4, 5, 6, 7], // Tous les jours par d√©faut
      };
      
      // ‚úÖ Utiliser le m√™me syst√®me que profile_settings_page.dart
      final prefs = bootstrap.userPrefs;
      await prefs.patchProfile(payload);
      print('‚úÖ Profil sauvegard√© dans UserPrefsHive');

      // ‚úÖ Synchroniser vers UserPrefs pour compatibilit√©
      await UserPrefsSync.syncFromHiveToPrefs();
      print('‚úÖ Synchronisation vers UserPrefs termin√©e');
      
      // ‚úÖ Notifier le changement de version (comme profile_settings_page)
      VersionChangeNotifier.notifyVersionChange(bibleVersionCode);
      print('‚úÖ Changement de version notifi√©');
      
      // 2.5) Marquer le profil comme complet dans UserRepository
      print('‚úÖ Marquage profil comme complet...');
      final userRepo = UserRepository();
      await userRepo.markProfileComplete();
      print('‚úÖ Profil marqu√© comme complet');

      // 3) T√©l√©chargement de la Bible en ARRI√àRE-PLAN (non bloquant, offline-first ‚≠ê)
      print('üì• Lancement t√©l√©chargement Bible...');
      _downloadBibleInBackground(bibleVersionCode);
      print('‚úÖ T√©l√©chargement lanc√©');

      // 4) Configuration des rappels quotidiens avec alarme intelligente
      print('üîî Configuration alarme intelligente...');
      if (autoReminder) {
        try {
          await CrossPlatformAlarmService.scheduleAlarm(reminder);
          // Notification imm√©diate (feedback)
          await NotificationService.instance.showNow(
            title: 'Alarme configur√©e',
            body: 'Tu recevras une alarme chaque jour √† ${_fmt(reminder)} avec rappel automatique.',
          );
          print('‚úÖ Rappels configur√©s');
        } catch (e) {
          print('‚ö†Ô∏è Erreur lors de la configuration du rappel: $e');
          // Continuer m√™me si les rappels ne fonctionnent pas
          // Message supprim√© pour √©viter l'affichage persistant
        }
      } else {
        try {
          await DailyScheduler.cancel();
          print('‚úÖ Rappels annul√©s');
        } catch (e) {
          print('‚ö†Ô∏è Erreur lors de l\'annulation du rappel: $e');
        }
      }

      print('üß≠ Navigation vers /goals');
      if (mounted) context.go('/goals');
      print('‚úÖ Navigation r√©ussie');
      
    } catch (e, stackTrace) {
      print('‚ùå Erreur dans _onContinue(): $e');
      print('üìç Stack trace: $stackTrace');
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Erreur: $e'),
            backgroundColor: Colors.red,
            duration: const Duration(seconds: 5),
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() => isLoading = false);
      }
    }
  }


  String _fmt(TimeOfDay t) {
    final hh = t.hour.toString().padLeft(2, '0');
    final mm = t.minute.toString().padLeft(2, '0');
    return '$hh:$mm';
  }
  
  /// Normalise les anciennes valeurs de m√©ditation vers les nouvelles
  String _normalizeMeditationType(String rawMeditation) {
    // Correspondance des anciennes valeurs vers les nouvelles
    switch (rawMeditation) {
      case 'Lectio Divina':
        return 'M√©ditation profonde : Temps de r√©flexion entre les versets';
      case 'Contemplation':
        return 'M√©ditation profonde : Temps de r√©flexion entre les versets';
      case 'Pri√®re silencieuse':
        return 'Pri√®re : Pauses pour prier';
      case 'M√©ditation biblique':
        return 'M√©ditation profonde : Temps de r√©flexion entre les versets';
      default:
        // Si c'est d√©j√† une nouvelle valeur, la garder
        if (meditations.contains(rawMeditation)) {
          return rawMeditation;
        }
        // Sinon, utiliser la valeur par d√©faut
        return 'M√©ditation profonde : Temps de r√©flexion entre les versets';
    }
  }

  /// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  /// T√©l√©chargement Bible en ARRI√àRE-PLAN (Offline-First ‚≠ê)
  /// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  void _downloadBibleInBackground(String versionCode) {
    // Ne pas bloquer l'UI - t√©l√©chargement asynchrone
    Future.microtask(() async {
      try {
        print('üìñ T√©l√©chargement Bible $versionCode en arri√®re-plan...');
        
        // ‚úÖ V√©rifier si la version est d√©j√† disponible
        final isAvailable = await BibleVersionManager.isVersionAvailable(versionCode);
        if (isAvailable) {
          print('‚úÖ Version $versionCode d√©j√† disponible');
          return;
        }
        
        // ‚úÖ T√©l√©charger la version depuis VideoPsalm
        final success = await BibleVersionManager.downloadVideoPsalmVersion(versionCode);
        
        if (success) {
          print('‚úÖ Bible $versionCode t√©l√©charg√©e avec succ√®s (arri√®re-plan)');
          
          // ‚úÖ Notification discr√®te de succ√®s
          if (mounted) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('Version $versionCode t√©l√©charg√©e avec succ√®s'),
                backgroundColor: Colors.green,
                duration: const Duration(seconds: 2),
              ),
            );
          }
        } else {
          print('‚ö†Ô∏è √âchec du t√©l√©chargement de $versionCode');
        }
        
      } catch (e) {
        print('‚ö†Ô∏è Erreur t√©l√©chargement Bible (non bloquant): $e');
        
        // ‚úÖ Notification d'erreur discr√®te
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Erreur t√©l√©chargement $versionCode: ${e.toString()}'),
              backgroundColor: Colors.orange,
              duration: const Duration(seconds: 3),
            ),
          );
        }
      }
    });
  }
}

