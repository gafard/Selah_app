import 'dart:convert';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:hive/hive.dart';

/// Service de gestion des cl√©s de chiffrement Hive
/// 
/// Utilise flutter_secure_storage pour stocker les cl√©s de chiffrement de mani√®re s√©curis√©e :
/// - Android : Android KeyStore
/// - iOS : Keychain
/// 
/// Chaque box Hive chiffr√©e a sa propre cl√© AES-256 (32 bytes)
class EncryptionService {
  static const _secureStorage = FlutterSecureStorage(
    aOptions: AndroidOptions(
      encryptedSharedPreferences: true,
    ),
    iOptions: IOSOptions(
      accessibility: KeychainAccessibility.first_unlock,
    ),
  );
  
  static const String _keyPrefix = 'hive_encryption_key_';
  
  /// G√©n√®re ou r√©cup√®re une cl√© de chiffrement pour une box
  /// 
  /// Si la cl√© existe d√©j√† dans le Keychain/KeyStore, elle est r√©cup√©r√©e.
  /// Sinon, une nouvelle cl√© AES-256 est g√©n√©r√©e et stock√©e de mani√®re s√©curis√©e.
  /// 
  /// [boxName] : Nom de la box Hive (ex: 'local_user', 'local_plans')
  /// 
  /// Retourne : List<int> de 32 bytes (256 bits) pour AES-256
  static Future<List<int>> getEncryptionKey(String boxName) async {
    final keyName = '$_keyPrefix$boxName';
    
    try {
      // V√©rifier si la cl√© existe d√©j√†
      final existingKey = await _secureStorage.read(key: keyName);
      
      if (existingKey != null) {
        // D√©coder la cl√© existante (stock√©e en base64url)
        return base64Url.decode(existingKey);
      }
      
      // G√©n√©rer une nouvelle cl√© de 256 bits (32 bytes)
      final key = Hive.generateSecureKey();
      
      // Sauvegarder la cl√© de mani√®re s√©curis√©e (encod√©e en base64url)
      await _secureStorage.write(
        key: keyName,
        value: base64Url.encode(key),
      );
      
      print('üîë Nouvelle cl√© de chiffrement g√©n√©r√©e pour: $boxName');
      return key;
    } catch (e) {
      print('‚ùå Erreur lors de la r√©cup√©ration/g√©n√©ration de la cl√© pour $boxName: $e');
      rethrow;
    }
  }
  
  /// Supprime la cl√© de chiffrement d'une box
  /// 
  /// ‚ö†Ô∏è ATTENTION : Supprimer la cl√© rend les donn√©es chiffr√©es inaccessibles !
  /// √Ä utiliser uniquement lors de la suppression compl√®te des donn√©es utilisateur.
  /// 
  /// [boxName] : Nom de la box Hive
  static Future<void> deleteEncryptionKey(String boxName) async {
    final keyName = '$_keyPrefix$boxName';
    try {
      await _secureStorage.delete(key: keyName);
      print('üóëÔ∏è Cl√© de chiffrement supprim√©e pour: $boxName');
    } catch (e) {
      print('‚ùå Erreur lors de la suppression de la cl√© pour $boxName: $e');
    }
  }
  
  /// Supprime TOUTES les cl√©s de chiffrement Hive
  /// 
  /// ‚ö†Ô∏è ATTENTION : Rend TOUTES les donn√©es chiffr√©es inaccessibles !
  /// √Ä utiliser uniquement lors de :
  /// - D√©connexion compl√®te de l'utilisateur
  /// - Suppression du compte
  /// - Reset factory de l'application
  static Future<void> deleteAllEncryptionKeys() async {
    try {
      final allKeys = await _secureStorage.readAll();
      int deletedCount = 0;
      
      for (final keyName in allKeys.keys) {
        if (keyName.startsWith(_keyPrefix)) {
          await _secureStorage.delete(key: keyName);
          deletedCount++;
        }
      }
      
      print('üóëÔ∏è $deletedCount cl√©(s) de chiffrement supprim√©e(s)');
    } catch (e) {
      print('‚ùå Erreur lors de la suppression de toutes les cl√©s: $e');
    }
  }
  
  /// V√©rifie si une cl√© de chiffrement existe pour une box
  /// 
  /// [boxName] : Nom de la box Hive
  /// 
  /// Retourne : true si la cl√© existe, false sinon
  static Future<bool> hasEncryptionKey(String boxName) async {
    final keyName = '$_keyPrefix$boxName';
    try {
      final key = await _secureStorage.read(key: keyName);
      return key != null;
    } catch (e) {
      print('‚ùå Erreur lors de la v√©rification de la cl√© pour $boxName: $e');
      return false;
    }
  }
  
  /// Liste toutes les boxes ayant une cl√© de chiffrement
  /// 
  /// Utile pour le debugging et la maintenance
  /// 
  /// Retourne : List<String> des noms de boxes chiffr√©es
  static Future<List<String>> listEncryptedBoxes() async {
    try {
      final allKeys = await _secureStorage.readAll();
      final encryptedBoxes = <String>[];
      
      for (final keyName in allKeys.keys) {
        if (keyName.startsWith(_keyPrefix)) {
          final boxName = keyName.replaceFirst(_keyPrefix, '');
          encryptedBoxes.add(boxName);
        }
      }
      
      return encryptedBoxes;
    } catch (e) {
      print('‚ùå Erreur lors de la liste des boxes chiffr√©es: $e');
      return [];
    }
  }
  
  /// V√©rifie la disponibilit√© du chiffrement mat√©riel
  /// 
  /// Sur Android < 6.0, le chiffrement mat√©riel n'est pas disponible.
  /// flutter_secure_storage utilisera un fallback logiciel.
  /// 
  /// Retourne : true si le chiffrement mat√©riel est disponible
  static Future<bool> isHardwareEncryptionAvailable() async {
    try {
      // Tenter d'√©crire et lire une cl√© de test
      const testKey = 'test_encryption_key';
      const testValue = 'test_value';
      
      await _secureStorage.write(key: testKey, value: testValue);
      final readValue = await _secureStorage.read(key: testKey);
      await _secureStorage.delete(key: testKey);
      
      return readValue == testValue;
    } catch (e) {
      print('‚ö†Ô∏è Chiffrement mat√©riel non disponible: $e');
      return false;
    }
  }
}

