import '../services/intelligent_prayer_generator.dart';

/// Exemple d'int√©gration du g√©n√©rateur de pri√®res intelligentes
class IntelligentPrayerIntegrationExample {
  
  /// Exemple d'utilisation avec des donn√©es r√©elles
  static Future<void> demonstrateIntegration() async {
    print('üöÄ === D√âMONSTRATION INT√âGRATION PRI√àRES INTELLIGENTES ===\n');
    
    // 1. Cr√©er un contexte de pri√®re avec des donn√©es r√©alistes
    final ctx = PrayerContext(
      userProfile: {
        'level': 'Fid√®le r√©gulier',
        'goal': 'Discipline de pri√®re',
        'durationMin': 15,
        'meditation': 'M√©ditation biblique',
      },
      season: 'ordinary',
      detectedThemes: ['family', 'love', 'faith'],
      answers: {
        'aboutGod': {'gr√¢ce', 'amour', 'fid√©lit√©'},
        'neighbor': {'service', 'compassion'},
        'applyToday': {'patience', 'humilit√©'},
        'verseHit': {'"Dieu est amour"'},
      },
      passageRef: '1 Jean 4:8',
      passageText: 'Celui qui n\'aime pas n\'a pas connu Dieu, car Dieu est amour.',
    );
    
    print('üìã Contexte cr√©√©:');
    print('  ‚Ä¢ Niveau: ${ctx.userProfile['level']}');
    print('  ‚Ä¢ Objectif: ${ctx.userProfile['goal']}');
    print('  ‚Ä¢ Saison: ${ctx.season}');
    print('  ‚Ä¢ Th√®mes d√©tect√©s: ${ctx.detectedThemes}');
    print('  ‚Ä¢ Passage: ${ctx.passageRef}');
    print('  ‚Ä¢ Texte: "${ctx.passageText}"\n');
    
    // 2. G√©n√©rer les pri√®res intelligentes
    final ideas = IntelligentPrayerGenerator.generate(ctx);
    
    print('üéØ === PRI√àRES G√âN√âR√âES ===\n');
    
    for (int i = 0; i < ideas.length; i++) {
      final idea = ideas[i];
      print('${i + 1}. ${idea.title}');
      print('   Cat√©gorie: ${idea.category}');
      print('   Score: ${idea.score.toStringAsFixed(2)}');
      print('   √âmotion: ${idea.emotion ?? 'neutre'}');
      print('   Verset: ${idea.verseRef ?? 'aucun'}');
      print('   Tags: ${idea.tags.join(', ')}');
      print('   Corps: "${idea.body}"');
      print('   M√©tadonn√©es: ${idea.metadata}');
      print('');
    }
    
    // 3. Conversion vers le format UI existant
    print('üîÑ === CONVERSION VERS FORMAT UI ===\n');
    
    final prayerItems = ideas.map((idea) => idea.toPrayerItem()).toList();
    
    for (final item in prayerItems) {
      print('‚Ä¢ ${item['subject']}');
      print('  Th√®me: ${item['theme']}');
      print('  Cat√©gorie: ${item['category']}');
      print('  Score: ${item['score']}');
      print('');
    }
    
    // 4. Test avec diff√©rents profils utilisateur
    print('üë• === TEST PROFILS DIFF√âRENTS ===\n');
    
    final profiles = [
      {'level': 'Nouveau converti', 'goal': 'Grandir dans la foi'},
      {'level': 'R√©trograde', 'goal': 'Exp√©rimenter la gu√©rison'},
      {'level': 'Serviteur/leader', 'goal': 'Partager ma foi'},
    ];
    
    for (final profile in profiles) {
      final testCtx = PrayerContext(
        userProfile: {
          ...profile,
          'durationMin': 10,
          'meditation': 'Lectio Divina',
        },
        season: 'lent',
        detectedThemes: ['repentance', 'restoration'],
        answers: {
          'aboutGod': {'mis√©ricorde', 'pardon'},
          'neighbor': {'r√©conciliation'},
        },
        passageRef: 'Luc 15:20',
        passageText: 'Il courut vers son fils, le prit dans ses bras et l\'embrassa.',
      );
      
      final testIdeas = IntelligentPrayerGenerator.generate(testCtx);
      
      print('Profil: ${profile['level']} - ${profile['goal']}');
      print('  ‚Üí ${testIdeas.length} pri√®res g√©n√©r√©es');
      print('  ‚Üí √âquilibre: ${_analyzeBalance(testIdeas)}');
      print('  ‚Üí Top √©motion: ${_getTopEmotion(testIdeas)}');
      print('');
    }
  }
  
  /// Analyse l'√©quilibre des cat√©gories ACTS
  static String _analyzeBalance(List<PrayerIdea> ideas) {
    final counts = <String, int>{};
    for (final idea in ideas) {
      counts[idea.category] = (counts[idea.category] ?? 0) + 1;
    }
    return counts.entries.map((e) => '${e.key}:${e.value}').join(', ');
  }
  
  /// Trouve l'√©motion dominante
  static String _getTopEmotion(List<PrayerIdea> ideas) {
    final emotions = ideas.where((i) => i.emotion != null).map((i) => i.emotion!).toList();
    if (emotions.isEmpty) return 'aucune';
    
    final counts = <String, int>{};
    for (final emotion in emotions) {
      counts[emotion] = (counts[emotion] ?? 0) + 1;
    }
    
    final top = counts.entries.reduce((a, b) => a.value > b.value ? a : b);
    return '${top.key} (${top.value})';
  }
  
  /// Exemple d'int√©gration dans une page existante
  static Map<String, dynamic> integrateWithExistingPage({
    required Map<String, dynamic> userProfile,
    required String passageText,
    required String passageRef,
    required Map<String, Set<String>> selectedAnswers,
    List<String>? detectedThemes,
  }) {
    // Cr√©er le contexte
    final ctx = PrayerContext.fromMeditation(
      userProfile: userProfile,
      passageText: passageText,
      passageRef: passageRef,
      answers: selectedAnswers,
      detectedThemes: detectedThemes,
    );
    
    // G√©n√©rer les pri√®res
    final ideas = IntelligentPrayerGenerator.generate(ctx);
    
    // Convertir vers le format attendu par l'UI
    final prayerItems = ideas.map((idea) => idea.toPrayerItem()).toList();
    
    return {
      'prayerItems': prayerItems,
      'metadata': {
        'totalGenerated': ideas.length,
        'userLevel': userProfile['level'],
        'userGoal': userProfile['goal'],
        'season': ctx.season,
        'passageRef': passageRef,
        'generationTime': DateTime.now().toIso8601String(),
      },
    };
  }
}

/// Utilitaire pour tester l'int√©gration
class PrayerIntegrationTest {
  static Future<void> runTests() async {
    print('üß™ === TESTS INT√âGRATION PRI√àRES ===\n');
    
    try {
      // Test 1: G√©n√©ration basique
      print('Test 1: G√©n√©ration basique...');
      final basicCtx = PrayerContext(
        userProfile: {'level': 'Fid√®le r√©gulier', 'goal': 'Discipline quotidienne'},
        season: 'ordinary',
        detectedThemes: [],
        answers: {'aboutGod': {'amour'}},
        passageRef: 'Jean 3:16',
        passageText: 'Car Dieu a tant aim√© le monde...',
      );
      
      final basicIdeas = IntelligentPrayerGenerator.generate(basicCtx);
      assert(basicIdeas.isNotEmpty, 'Doit g√©n√©rer au moins une pri√®re');
      assert(basicIdeas.length <= 5, 'Doit g√©n√©rer au maximum 5 pri√®res');
      print('‚úÖ Test 1 r√©ussi: ${basicIdeas.length} pri√®res g√©n√©r√©es');
      
      // Test 2: Profils √©motionnels
      print('\nTest 2: Profils √©motionnels...');
      final profiles = ['Nouveau converti', 'R√©trograde', 'Serviteur/leader'];
      
      for (final level in profiles) {
        final emotionProfile = EmotionProfiles.forLevel(level);
        assert(emotionProfile.level == level, 'Profil √©motionnel doit correspondre');
        assert(emotionProfile.primaryByCategory.isNotEmpty, 'Doit avoir des √©motions d√©finies');
        print('‚úÖ Profil $level: ${emotionProfile.primaryByCategory.length} √©motions');
      }
      
      // Test 3: √âquilibre ACTS
      print('\nTest 3: √âquilibre ACTS...');
      final balancedIdeas = IntelligentPrayerGenerator.generate(basicCtx);
      final categories = balancedIdeas.map((i) => i.category).toSet();
      assert(categories.length >= 2, 'Doit avoir au moins 2 cat√©gories diff√©rentes');
      print('‚úÖ √âquilibre: ${categories.join(', ')}');
      
      // Test 4: M√©tadonn√©es
      print('\nTest 4: M√©tadonn√©es...');
      final firstIdea = balancedIdeas.first;
      assert(firstIdea.metadata.isNotEmpty, 'Doit avoir des m√©tadonn√©es');
      assert(firstIdea.metadata['source'] != null, 'Doit avoir une source');
      print('‚úÖ M√©tadonn√©es: ${firstIdea.metadata.keys.join(', ')}');
      
      print('\nüéâ Tous les tests sont pass√©s avec succ√®s !');
      
    } catch (e) {
      print('‚ùå Test √©chou√©: $e');
      rethrow;
    }
  }
}

/// Point d'entr√©e pour lancer la d√©monstration
void main() async {
  await IntelligentPrayerIntegrationExample.demonstrateIntegration();
  await PrayerIntegrationTest.runTests();
}
