import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:go_router/go_router.dart';

/// üîî Service de notification plein √©cran pour les alarmes
/// 
/// G√®re l'affichage des notifications plein √©cran avec actions interactives
class FullScreenNotificationService {
  static final FlutterLocalNotificationsPlugin _notifications = FlutterLocalNotificationsPlugin();
  
  static const String ALARM_CHANNEL_ID = 'selah_alarm_channel';
  static const String ALARM_CHANNEL_NAME = 'Alarmes Selah';
  static const int ALARM_NOTIFICATION_ID = 2001;

  /// Initialise le service de notifications
  static Future<void> initialize() async {
    const androidInit = AndroidInitializationSettings('@mipmap/ic_launcher');
    const iosInit = DarwinInitializationSettings();
    const initSettings = InitializationSettings(
      android: androidInit,
      iOS: iosInit,
    );
    
    await _notifications.initialize(
      initSettings,
      onDidReceiveNotificationResponse: _onNotificationResponse,
    );

    // Cr√©er le canal d'alarme
    await _createAlarmChannel();
  }

  /// Cr√©e le canal de notification pour les alarmes
  static Future<void> _createAlarmChannel() async {
    const androidChannel = AndroidNotificationChannel(
      ALARM_CHANNEL_ID,
      ALARM_CHANNEL_NAME,
      description: 'Notifications d\'alarme pour les rappels de m√©ditation',
      importance: Importance.max,
      enableVibration: true,
      enableLights: true,
      playSound: true,
    );

    await _notifications
        .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>()
        ?.createNotificationChannel(androidChannel);
  }

  /// Affiche une notification plein √©cran d'alarme
  static Future<void> showFullScreenAlarm() async {
    try {
      final androidDetails = AndroidNotificationDetails(
        ALARM_CHANNEL_ID,
        ALARM_CHANNEL_NAME,
        importance: Importance.max,
        category: AndroidNotificationCategory.alarm,
        fullScreenIntent: true,
        showWhen: true,
        when: DateTime.now().millisecondsSinceEpoch,
        styleInformation: const BigTextStyleInformation(
          'C\'est l\'heure de ta m√©ditation quotidienne üôè\n\n'
          'Prends un moment pour te connecter avec Dieu et m√©diter sa Parole.',
          contentTitle: 'Selah - Moment de m√©ditation',
        ),
        actions: [
          AndroidNotificationAction(
            'open_app',
            'Commencer maintenant',
            icon: DrawableResourceAndroidBitmap('@mipmap/ic_launcher'),
            showsUserInterface: true,
          ),
          AndroidNotificationAction(
            'snooze_10min',
            'Rappel dans 10min',
            icon: DrawableResourceAndroidBitmap('@mipmap/ic_launcher'),
          ),
          AndroidNotificationAction(
            'dismiss',
            'Ignorer',
            icon: DrawableResourceAndroidBitmap('@mipmap/ic_launcher'),
          ),
        ],
      );

      const iosDetails = DarwinNotificationDetails(
        interruptionLevel: InterruptionLevel.timeSensitive,
        categoryIdentifier: 'ALARM_CATEGORY',
      );

      final notificationDetails = NotificationDetails(
        android: androidDetails,
        iOS: iosDetails,
      );

      await _notifications.show(
        ALARM_NOTIFICATION_ID,
        'Selah - Moment de m√©ditation',
        'C\'est l\'heure de ta m√©ditation quotidienne üôè',
        notificationDetails,
      );

      print('üîî Notification plein √©cran affich√©e');
    } catch (e) {
      print('‚ùå Erreur affichage notification: $e');
    }
  }

  /// G√®re les r√©ponses aux notifications
  static void _onNotificationResponse(NotificationResponse response) {
    final action = response.actionId;
    
    switch (action) {
      case 'open_app':
        _handleOpenApp();
        break;
      case 'snooze_10min':
        _handleSnooze();
        break;
      case 'dismiss':
        _handleDismiss();
        break;
      default:
        // Tap sur la notification
        _handleOpenApp();
    }
  }

  /// Ouvre l'application
  static void _handleOpenApp() {
    print('üì± Ouverture de l\'application depuis la notification');
    // L'application s'ouvrira automatiquement
    // On peut ajouter une navigation sp√©cifique si n√©cessaire
  }

  /// Programme un rappel dans 10 minutes
  static void _handleSnooze() {
    print('‚è∞ Rappel programm√© dans 10 minutes');
    // Le rappel est d√©j√† g√©r√© par IntelligentAlarmService
  }

  /// Ignore l'alarme
  static void _handleDismiss() {
    print('üö´ Alarme ignor√©e');
    // L'utilisateur a choisi d'ignorer l'alarme
  }

  /// Annule la notification d'alarme
  static Future<void> cancelAlarmNotification() async {
    await _notifications.cancel(ALARM_NOTIFICATION_ID);
    print('üö´ Notification d\'alarme annul√©e');
  }

  /// V√©rifie si les notifications sont activ√©es
  static Future<bool> areNotificationsEnabled() async {
    try {
      final androidPlugin = _notifications
          .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>();
      return await androidPlugin?.areNotificationsEnabled() ?? false;
    } catch (e) {
      print('‚ùå Erreur v√©rification notifications: $e');
      return false;
    }
  }
}
