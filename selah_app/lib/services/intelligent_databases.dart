// lib/services/intelligent_databases.dart

import 'intelligent_duration_calculator.dart';

/// üß† Service central des bases de donn√©es intelligentes
/// 
/// Orchestre toutes les donn√©es intelligentes pour fournir des calculs
/// d'impact spirituel pr√©cis et des recommandations personnalis√©es.
class IntelligentDatabases {
  
  // ============ CALCULS D'IMPACT INTELLIGENTS ============
  
  /// Calcule l'impact spirituel total d'un livre sur un objectif
  /// avec prise en compte de la posture du c≈ìur
  static double calculateBookImpactOnGoal({
    required String book,
    required String goal,
    String? posture,
  }) {
    if (posture != null) {
      return IntelligentDurationCalculator.calculateBookImpactWithPosture(
        book: book,
        goal: goal,
        posture: posture,
      );
    } else {
      return IntelligentDurationCalculator.calculateBookImpactOnGoal(book, goal);
    }
  }
  
  /// R√©cup√®re les livres les plus pertinents pour un profil complet
  static List<String> getRecommendedBooksForProfile({
    required String goal,
    String? posture,
    String? motivation,
    int limit = 5,
  }) {
    // 1. Calculer l'impact de base pour tous les livres
    final allBooks = _getAllBibleBooks();
    final bookScores = <String, double>{};
    
    for (final book in allBooks) {
      double impact = calculateBookImpactOnGoal(
        book: book,
        goal: goal,
        posture: posture,
      );
      
      // 2. Bonus si le livre correspond √† la posture
      if (posture != null) {
        final postureBonus = _getPostureBonus(book, posture);
        impact = (impact * (1.0 + postureBonus)).clamp(0.0, 1.0);
      }
      
      // 3. Seuil minimum de pertinence
      if (impact > 0.5) {
        bookScores[book] = impact;
      }
    }
    
    // 4. Trier par score d√©croissant
    final sortedBooks = bookScores.entries.toList()
      ..sort((a, b) => b.value.compareTo(a.value));
    
    return sortedBooks.take(limit).map((entry) => entry.key).toList();
  }
  
  /// Calcule la dur√©e optimale d'un plan avec donn√©es intelligentes
  static int calculateOptimalDuration({
    required String goal,
    required String level,
    required int dailyMinutes,
    required String meditationType,
    String? motivation,
    String? posture,
  }) {
    // 1. Dur√©e de base
    final baseDuration = IntelligentDurationCalculator.calculateOptimalDuration(
      goal: goal,
      level: level,
      dailyMinutes: dailyMinutes,
      meditationType: meditationType,
    ).optimalDays;
    
    // 2. Ajustement selon la motivation
    if (motivation != null) {
      final multipliers = IntelligentDurationCalculator.getMotivationMultipliers();
      final motivationData = multipliers.firstWhere(
        (m) => m['motivation'] == motivation,
        orElse: () => {'duration_factor': 1.0},
      );
      
      final factor = motivationData['duration_factor'] as double? ?? 1.0;
      return (baseDuration * factor).round();
    }
    
    return baseDuration;
  }
  
  /// Calcule la longueur optimale des passages selon le livre
  static int calculateOptimalPassageLength({
    required String book,
    required int minutes,
    required String meditationType,
  }) {
    // 1. Utiliser la densit√© du livre depuis BookDensityCalculator
    final density = _getBookDensity(book);
    double vpm = density.versesPerMinute;
    
    switch (meditationType.toLowerCase()) {
      case 'm√©ditation profonde':
        vpm *= 0.7; // Plus lent pour la m√©ditation
        break;
      case 'lecture rapide':
        vpm *= 1.3; // Plus rapide
        break;
      case '√©tude approfondie':
        vpm *= 0.5; // Tr√®s lent pour l'√©tude
        break;
      default:
        // M√©ditation normale
        break;
    }
    
    // 3. Calculer le nombre de versets
    final verses = (minutes * vpm).round();
    return verses.clamp(5, 30); // Entre 5 et 30 versets
  }
  
  /// G√©n√®re des recommandations personnalis√©es de presets
  static List<Map<String, dynamic>> generatePersonalizedPresets({
    required String goal,
    required String level,
    required int dailyMinutes,
    String? posture,
    String? motivation,
  }) {
    final recommendedBooks = getRecommendedBooksForProfile(
      goal: goal,
      posture: posture,
      motivation: motivation,
      limit: 3,
    );
    
    if (recommendedBooks.isEmpty) {
      return _getDefaultPresets();
    }
    
    // G√©n√©rer des presets bas√©s sur les livres recommand√©s
    final presets = <Map<String, dynamic>>[];
    
    for (int i = 0; i < recommendedBooks.length; i++) {
      final book = recommendedBooks[i];
      final impact = calculateBookImpactOnGoal(
        book: book,
        goal: goal,
        posture: posture,
      );
      
      final duration = calculateOptimalDuration(
        goal: goal,
        level: level,
        dailyMinutes: dailyMinutes,
        meditationType: 'M√©ditation Biblique',
        motivation: motivation,
        posture: posture,
      );
      
      presets.add({
        'name': '${_getPresetNameForBook(book)} - ${_getGoalShortName(goal)}',
        'description': _getPresetDescription(book, goal, impact),
        'books': [book],
        'duration_days': duration,
        'minutes_per_day': dailyMinutes,
        'impact_score': impact,
        'meditation_type': 'M√©ditation Biblique',
        'level': level,
        'goal': goal,
        'posture': posture,
        'motivation': motivation,
      });
    }
    
    return presets;
  }
  
  // ============ M√âTHODES UTILITAIRES ============
  
  /// R√©cup√®re la densit√© d'un livre (fallback simple)
  static _BookDensity _getBookDensity(String book) {
    // Mapping simplifi√© des livres vers leur densit√©
    final bookDensities = {
      'Jean': const _BookDensity(versesPerMinute: 2.5),
      'Psaumes': const _BookDensity(versesPerMinute: 3.2),
      'Romains': const _BookDensity(versesPerMinute: 2.0),
      'Actes': const _BookDensity(versesPerMinute: 2.7),
      '√âph√©siens': const _BookDensity(versesPerMinute: 2.0),
      'Philippiens': const _BookDensity(versesPerMinute: 2.4),
      'Colossiens': const _BookDensity(versesPerMinute: 2.1),
      '1 Corinthiens': const _BookDensity(versesPerMinute: 2.3),
      '2 Corinthiens': const _BookDensity(versesPerMinute: 2.2),
      'Galates': const _BookDensity(versesPerMinute: 2.1),
      '1 Thessaloniciens': const _BookDensity(versesPerMinute: 2.4),
      '2 Thessaloniciens': const _BookDensity(versesPerMinute: 2.3),
      '1 Timoth√©e': const _BookDensity(versesPerMinute: 2.2),
      '2 Timoth√©e': const _BookDensity(versesPerMinute: 2.3),
      'Tite': const _BookDensity(versesPerMinute: 2.4),
      'Phil√©mon': const _BookDensity(versesPerMinute: 2.5),
      'H√©breux': const _BookDensity(versesPerMinute: 1.9),
      'Jacques': const _BookDensity(versesPerMinute: 2.5),
      '1 Pierre': const _BookDensity(versesPerMinute: 2.3),
      '2 Pierre': const _BookDensity(versesPerMinute: 2.1),
      '1 Jean': const _BookDensity(versesPerMinute: 2.4),
      '2 Jean': const _BookDensity(versesPerMinute: 2.6),
      '3 Jean': const _BookDensity(versesPerMinute: 2.6),
      'Jude': const _BookDensity(versesPerMinute: 2.2),
      'Apocalypse': const _BookDensity(versesPerMinute: 1.8),
      'Matthieu': const _BookDensity(versesPerMinute: 2.7),
      'Marc': const _BookDensity(versesPerMinute: 2.8),
      'Luc': const _BookDensity(versesPerMinute: 2.6),
      'Gen√®se': const _BookDensity(versesPerMinute: 2.8),
      'Exode': const _BookDensity(versesPerMinute: 2.5),
      'L√©vitique': const _BookDensity(versesPerMinute: 1.8),
      'Nombres': const _BookDensity(versesPerMinute: 2.3),
      'Deut√©ronome': const _BookDensity(versesPerMinute: 2.0),
      'Josu√©': const _BookDensity(versesPerMinute: 2.7),
      'Juges': const _BookDensity(versesPerMinute: 2.6),
      'Ruth': const _BookDensity(versesPerMinute: 3.0),
      '1 Samuel': const _BookDensity(versesPerMinute: 2.6),
      '2 Samuel': const _BookDensity(versesPerMinute: 2.6),
      '1 Rois': const _BookDensity(versesPerMinute: 2.5),
      '2 Rois': const _BookDensity(versesPerMinute: 2.5),
      '1 Chroniques': const _BookDensity(versesPerMinute: 2.4),
      '2 Chroniques': const _BookDensity(versesPerMinute: 2.4),
      'Esdras': const _BookDensity(versesPerMinute: 2.6),
      'N√©h√©mie': const _BookDensity(versesPerMinute: 2.6),
      'Esther': const _BookDensity(versesPerMinute: 2.7),
      'Job': const _BookDensity(versesPerMinute: 1.9),
      'Proverbes': const _BookDensity(versesPerMinute: 2.5),
      'Eccl√©siaste': const _BookDensity(versesPerMinute: 2.3),
      'Cantique des Cantiques': const _BookDensity(versesPerMinute: 2.8),
      '√âsa√Øe': const _BookDensity(versesPerMinute: 2.2),
      'J√©r√©mie': const _BookDensity(versesPerMinute: 2.1),
      'Lamentations': const _BookDensity(versesPerMinute: 2.5),
      '√âz√©chiel': const _BookDensity(versesPerMinute: 2.0),
      'Daniel': const _BookDensity(versesPerMinute: 2.3),
      'Os√©e': const _BookDensity(versesPerMinute: 2.2),
      'Jo√´l': const _BookDensity(versesPerMinute: 2.4),
      'Amos': const _BookDensity(versesPerMinute: 2.3),
      'Abdias': const _BookDensity(versesPerMinute: 2.5),
      'Jonas': const _BookDensity(versesPerMinute: 2.9),
      'Mich√©e': const _BookDensity(versesPerMinute: 2.3),
      'Nahum': const _BookDensity(versesPerMinute: 2.4),
      'Habacuc': const _BookDensity(versesPerMinute: 2.3),
      'Sophonie': const _BookDensity(versesPerMinute: 2.4),
      'Agg√©e': const _BookDensity(versesPerMinute: 2.5),
      'Zacharie': const _BookDensity(versesPerMinute: 2.2),
      'Malachie': const _BookDensity(versesPerMinute: 2.5),
    };
    
    return bookDensities[book] ?? const _BookDensity(versesPerMinute: 2.5);
  }
  
  /// R√©cup√®re tous les livres bibliques
  static List<String> _getAllBibleBooks() {
    return [
      'Gen√®se', 'Exode', 'L√©vitique', 'Nombres', 'Deut√©ronome',
      'Josu√©', 'Juges', 'Ruth', '1 Samuel', '2 Samuel',
      '1 Rois', '2 Rois', '1 Chroniques', '2 Chroniques', 'Esdras',
      'N√©h√©mie', 'Esther', 'Job', 'Psaumes', 'Proverbes',
      'Eccl√©siaste', 'Cantique des Cantiques', '√âsa√Øe', 'J√©r√©mie', 'Lamentations',
      '√âz√©chiel', 'Daniel', 'Os√©e', 'Jo√´l', 'Amos',
      'Abdias', 'Jonas', 'Mich√©e', 'Nahum', 'Habacuc',
      'Sophonie', 'Agg√©e', 'Zacharie', 'Malachie',
      'Matthieu', 'Marc', 'Luc', 'Jean', 'Actes',
      'Romains', '1 Corinthiens', '2 Corinthiens', 'Galates', '√âph√©siens',
      'Philippiens', 'Colossiens', '1 Thessaloniciens', '2 Thessaloniciens', '1 Timoth√©e',
      '2 Timoth√©e', 'Tite', 'Phil√©mon', 'H√©breux', 'Jacques',
      '1 Pierre', '2 Pierre', '1 Jean', '2 Jean', '3 Jean',
      'Jude', 'Apocalypse'
    ];
  }
  
  /// G√©n√®re un nom de preset pour un livre
  static String _getPresetNameForBook(String book) {
    final bookNames = {
      'Jean': 'Rencontre avec J√©sus',
      'Psaumes': 'Louange et Adoration',
      'Romains': 'Fondements de la Foi',
      'Actes': 'Puissance de l\'Esprit',
      '√âph√©siens': 'Identit√© en Christ',
      'Philippiens': 'Joie dans l\'√âpreuve',
      'Colossiens': 'Souverainet√© de Christ',
      '1 Corinthiens': 'Vie Chr√©tienne Pratique',
      '2 Corinthiens': 'Minist√®re et Souffrance',
      'Galates': 'Libert√© en Christ',
      '1 Thessaloniciens': 'Esp√©rance du Retour',
      '2 Thessaloniciens': 'Pr√©paration √† l\'Avenir',
      '1 Timoth√©e': 'Leadership Chr√©tien',
      '2 Timoth√©e': 'Fid√©lit√© jusqu\'au Bout',
      'Tite': 'Ordre dans l\'√âglise',
      'Phil√©mon': 'R√©conciliation',
      'H√©breux': 'Sup√©riorit√© de Christ',
      'Jacques': 'Foi en Action',
      '1 Pierre': 'Souffrance et Gloire',
      '2 Pierre': 'Croissance Spirituelle',
      '1 Jean': 'Amour et V√©rit√©',
      '2 Jean': 'Marche dans la V√©rit√©',
      '3 Jean': 'Hospitalit√© Chr√©tienne',
      'Jude': 'Contre l\'Apostasie',
      'Apocalypse': 'R√©v√©lation de l\'Avenir',
    };
    
    return bookNames[book] ?? '√âtude de $book';
  }
  
  /// G√©n√®re une description de preset
  static String _getPresetDescription(String book, String goal, double impact) {
    final impactPercent = (impact * 100).round();
    return '√âtude de $book pour ${_getGoalShortName(goal)}. Impact spirituel: $impactPercent%';
  }
  
  /// R√©cup√®re le nom court d'un objectif
  static String _getGoalShortName(String goal) {
    final shortNames = {
      'üî• √ätre transform√© √† son image': 'Transformation',
      '‚ù§Ô∏è D√©velopper l\'intimit√© avec le P√®re': 'Intimit√©',
      'üíé Rencontrer J√©sus personnellement': 'Rencontre',
      'üî• √ätre transform√© par l\'Esprit': 'Transformation',
      'üìö Approfondir ma connaissance': 'Connaissance',
      '‚ö° Recevoir la puissance de l\'Esprit': 'Puissance',
      'üïäÔ∏è Marcher par l\'Esprit': 'Marche',
      'üôè √âcouter la voix de Dieu': '√âcoute',
      'üéØ D√©couvrir ma mission': 'Mission',
      'üí™ Grandir dans la foi': 'Foi',
      'üïäÔ∏è Vivre dans la saintet√©': 'Saintet√©',
      '‚ù§Ô∏è Aimer comme J√©sus': 'Amour',
      'üåü Briller pour Dieu': 'T√©moignage',
      'üõ°Ô∏è R√©sister aux tentations': 'R√©sistance',
      'üéÅ Recevoir les b√©n√©dictions': 'B√©n√©dictions',
      'üå± Grandir spirituellement': 'Croissance',
      'üîç Comprendre la Parole': 'Compr√©hension',
      'üéØ Accomplir ma destin√©e': 'Destin√©e',
    };
    
    return shortNames[goal] ?? 'Objectif spirituel';
  }
  
  /// Presets par d√©faut en cas d'√©chec
  static List<Map<String, dynamic>> _getDefaultPresets() {
    return [
      {
        'name': 'M√©ditation Biblique G√©n√©rale',
        'description': 'Plan √©quilibr√© pour la croissance spirituelle',
        'books': ['Psaumes', 'Jean'],
        'duration_days': 30,
        'minutes_per_day': 15,
        'impact_score': 0.7,
        'meditation_type': 'M√©ditation Biblique',
        'level': 'Interm√©diaire',
      },
      {
        'name': '√âtude Approfondie',
        'description': 'Plan intensif pour approfondir la connaissance',
        'books': ['Romains', 'H√©breux'],
        'duration_days': 45,
        'minutes_per_day': 25,
        'impact_score': 0.8,
        'meditation_type': '√âtude Approfondie',
        'level': 'Avanc√©',
      },
    ];
  }
  
  // ============ M√âTHODES DE DEBUG ============
  
  /// Affiche les statistiques des bases de donn√©es
  static void printDatabaseStats() {
    print('üìä Statistiques des Bases de Donn√©es Intelligentes:');
    print('   - Livres bibliques: ${_getAllBibleBooks().length}');
    print('   - Th√®mes disponibles: 10 (faith, identity, character, etc.)');
    print('   - Objectifs spirituels: 18');
    print('   - Postures du c≈ìur: 6');
    print('   - Motivations: ${IntelligentDurationCalculator.getMotivationMultipliers().length}');
    print('   - VPM par livre: ${_getAllBibleBooks().length}');
  }
  
  /// Teste le calcul d'impact pour un exemple
  static void testImpactCalculation() {
    print('üß™ Test de calcul d\'impact:');
    
    const book = 'Jean';
    const goal = 'üíé Rencontrer J√©sus personnellement';
    const posture = 'üíé Rencontrer J√©sus personnellement';
    
    final impact = calculateBookImpactOnGoal(
      book: book,
      goal: goal,
      posture: posture,
    );
    
    print('   - Livre: $book');
    print('   - Objectif: $goal');
    print('   - Posture: $posture');
    print('   - Impact calcul√©: ${(impact * 100).toStringAsFixed(1)}%');
  }
  
  /// Retourne le bonus de posture pour un livre
  static double _getPostureBonus(String book, String posture) {
    final bookLower = book.toLowerCase();
    
    switch (posture) {
      case 'Rencontrer J√©sus':
        if (bookLower.contains('jean') || bookLower.contains('matthieu') || 
            bookLower.contains('marc') || bookLower.contains('luc')) {
          return 0.2;
        }
        return 0.0;
      case 'transform√©':
        if (bookLower.contains('romains') || bookLower.contains('galates') || 
            bookLower.contains('√©ph√©siens')) {
          return 0.2;
        }
        return 0.0;
      case '√âcouter':
        if (bookLower.contains('proverbes') || bookLower.contains('psaumes')) {
          return 0.2;
        }
        return 0.0;
      case 'intimit√©':
        if (bookLower.contains('jean') || bookLower.contains('psaumes') || 
            bookLower.contains('cantiques')) {
          return 0.2;
        }
        return 0.0;
      default:
        return 0.0;
    }
  }

  /// Calcule la pertinence d'un th√®me pour un nom de preset
  static double getThemeRelevance(String presetName, String theme) {
    final name = presetName.toLowerCase();
    final themeLower = theme.toLowerCase();
    
    // Mapping des th√®mes vers des mots-cl√©s
    final themeKeywords = {
      'fondations de la foi': ['fondation', 'base', 'christ', 'j√©sus', '√©vangile', 'salut'],
      'discipline spirituelle': ['discipline', 'r√©gularit√©', 'habitude', 'constance'],
      'repentance et pardon': ['repentance', 'pardon', 'p√©ch√©', 'confession'],
      'intimit√© avec dieu': ['intimit√©', 'pri√®re', 'adoration', 'psaumes'],
      'sagesse et connaissance': ['sagesse', 'connaissance', 'proverbes', '√©tude'],
      'mission et service': ['mission', 'service', '√©vang√©lisation', 't√©moignage'],
    };
    
    final keywords = themeKeywords[themeLower] ?? [];
    if (keywords.isEmpty) return 0.5;
    
    // Compter les mots-cl√©s trouv√©s
    int matches = 0;
    for (final keyword in keywords) {
      if (name.contains(keyword)) {
        matches++;
      }
    }
    
    // Retourner un score bas√© sur le nombre de correspondances
    return (matches / keywords.length).clamp(0.0, 1.0);
  }
}

/// Classe simple pour la densit√© d'un livre
class _BookDensity {
  final double versesPerMinute;
  
  const _BookDensity({required this.versesPerMinute});
}
