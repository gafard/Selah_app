import 'dart:convert';
import 'package:flutter/services.dart' show rootBundle;
import 'package:json5/json5.dart';
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart' as p;

/// Sch√©ma attendu (tol√©rant):
/// {
///   Abbreviation:"LSG", Language:"fr", VersionDate:"20121010000000", ...,
///   Testaments: [ { Books:[ { Chapters:[ { Verses:[ {Text:"..." , ID?:int} ... ] } ... ] } ... ] }, ... ]
/// }
///
/// Pas de nom de livre => on affecte selon l'ordre canonique (FR).

class BibleAssetImporter {
  BibleAssetImporter(this.db);

  final Database db;

  /// Ordre canonique (FR ‚Äì protestant) : 39 OT + 27 NT
  static const List<String> _ot = [
    'Gen√®se','Exode','L√©vitique','Nombres','Deut√©ronome','Josu√©','Juges','Ruth',
    '1 Samuel','2 Samuel','1 Rois','2 Rois','1 Chroniques','2 Chroniques',
    'Esdras','N√©h√©mie','Esther','Job','Psaumes','Proverbes','Eccl√©siaste','Cantique des Cantiques',
    '√âsa√Øe','J√©r√©mie','Lamentations','√âz√©chiel','Daniel','Os√©e','Jo√´l','Amos','Abdias',
    'Jonas','Mich√©e','Nahum','Habacuc','Sophonie','Agg√©e','Zacharie','Malachie'
  ];

  static const List<String> _nt = [
    'Matthieu','Marc','Luc','Jean','Actes','Romains','1 Corinthiens','2 Corinthiens','Galates',
    '√âph√©siens','Philippiens','Colossiens','1 Thessaloniciens','2 Thessaloniciens','1 Timoth√©e','2 Timoth√©e',
    'Tite','Phil√©mon','H√©breux','Jacques','1 Pierre','2 Pierre','1 Jean','2 Jean','3 Jean','Jude','Apocalypse'
  ];

  static const List<String> _allBooks = [..._ot, ..._nt];

  /// V√©rifie/Cr√©e la table
  static Future<void> ensureSchema(Database db) async {
    await db.execute('''
      CREATE TABLE IF NOT EXISTS verses(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        version TEXT NOT NULL,
        book TEXT NOT NULL,
        chapter INTEGER NOT NULL,
        verse INTEGER NOT NULL,
        text TEXT NOT NULL,
        UNIQUE(version, book, chapter, verse)
      )
    ''');
    await db.execute('CREATE INDEX IF NOT EXISTS idx_v ON verses(version,book,chapter,verse)');
  }

  /// Renvoie true si cette version est d√©j√† import√©e (‚â• 30k versets ‚âà Bible enti√®re)
  static Future<bool> isVersionImported(Database db, String versionId) async {
    final x = Sqflite.firstIntValue(await db.rawQuery(
      'SELECT COUNT(*) FROM verses WHERE version = ?', [versionId]));
    return (x ?? 0) > 30000;
  }

  /// Import d'un asset JSON/JSON5 ¬´ loose ¬ª
  static Future<void> importFromAsset({
    required Database db,
    required String assetPath,
    String? forceVersionId, // ex: lsg1910 / semeur / fc
  }) async {
    await ensureSchema(db);

    final raw = await rootBundle.loadString(assetPath);
    // tol√®re cl√©s non-quot√©es/virgules finales
    final Map<String, dynamic> data = Map<String, dynamic>.from(JSON5.parse(raw));

    final metaAbbr = (data['Abbreviation'] ?? data['abbr'] ?? forceVersionId ?? 'unknown').toString().trim();
    final versionId = _normalizeVersionId(metaAbbr);

    // si d√©j√† import√©e, on n'ins√®re pas deux fois
    if (await isVersionImported(db, versionId)) {
      print('üìö Version "$versionId" d√©j√† import√©e ‚Äî skip');
      return;
    }

    final testaments = (data['Testaments'] ?? data['testaments']) as List?;
    if (testaments == null || testaments.isEmpty) {
      throw Exception('Format invalide: champ Testaments manquant');
    }

    // On a pas de noms de livres => on mappe par position.
    // S√©curit√©: on tol√®re moins/plus de 39/27 si n√©cessaire, mais on tronque √† l'ordre canonique.
    final books = <Map<String, dynamic>>[];
    for (final t in testaments) {
      final tb = (t['Books'] ?? t['books']) as List? ?? const [];
      for (final b in tb) {
        books.add(Map<String, dynamic>.from(b));
      }
    }

    if (books.isEmpty) {
      throw Exception('Aucun livre trouv√© dans Testaments[].Books[]');
    }

    final batch = db.batch();
    int bookIndex = 0;

    for (final bookObj in books) {
      if (bookIndex >= _allBooks.length) break; // s√©curit√©
      final bookName = _allBooks[bookIndex];

      final chapters = (bookObj['Chapters'] ?? bookObj['chapters']) as List? ?? const [];
      if (chapters.isEmpty) {
        bookIndex++;
        continue;
      }

      int chapterIndex = 1;
      for (final chObj in chapters) {
        final verses = (chObj['Verses'] ?? chObj['verses']) as List? ?? const [];
        if (verses.isEmpty) {
          chapterIndex++;
          continue;
        }

        int verseIdx = 1;
        for (final vObj in verses) {
          // formats possibles: {Text:"..." [,ID:n]}
          final map = Map<String, dynamic>.from(vObj as Map);
          final txt = (map['Text'] ?? map['text'] ?? '').toString();
          final id = map['ID'] ?? map['id'];
          final verseNo = id is int ? id : verseIdx;

          if (txt.trim().isEmpty) {
            verseIdx++;
            continue;
          }

          batch.insert(
            'verses',
            {
              'version': versionId,
              'book': bookName,
              'chapter': chapterIndex,
              'verse': verseNo,
              'text': txt,
            },
            conflictAlgorithm: ConflictAlgorithm.ignore,
          );

          verseIdx++;
        }

        chapterIndex++;
      }

      bookIndex++;
    }

    await batch.commit(noResult: true);
    
    // Optimiser la base apr√®s import
    await db.execute('PRAGMA optimize');
    
    final count = Sqflite.firstIntValue(await db.rawQuery(
      'SELECT COUNT(*) FROM verses WHERE version = ?', [versionId]));
    print('‚úÖ Import "$versionId" termin√© ‚Äî ${count ?? 0} versets');
  }

  /// Force la r√©importation d'une version (pour dev/QA)
  static Future<void> forceReimport({
    required Database db,
    required String assetPath,
    String? forceVersionId,
  }) async {
    final versionId = _normalizeVersionId(
      forceVersionId ?? _guessVersionFromPath(assetPath)
    );
    
    print('üîÑ R√©import forc√© de "$versionId"...');
    
    // Supprimer les versets existants pour cette version
    await db.delete('verses', where: 'version = ?', whereArgs: [versionId]);
    
    // VACUUM pour r√©cup√©rer l'espace
    await db.execute('VACUUM');
    
    // R√©importer
    await importFromAsset(
      db: db,
      assetPath: assetPath,
      forceVersionId: forceVersionId,
    );
    
    print('‚úÖ R√©import forc√© de "$versionId" termin√©');
  }

  static String _guessVersionFromPath(String path) {
    if (path.contains('lsg1910')) return 'lsg1910';
    if (path.contains('semeur')) return 'semeur';
    if (path.contains('francais_courant')) return 'francais_courant';
    return 'unknown';
  }

  static String _normalizeVersionId(String s) {
    final lower = s.toLowerCase();
    if (lower.contains('semeur')) return 'semeur';
    if (lower.contains('lsg')) return 'lsg1910';
    if (lower.contains('fc')) return 'francais_courant';
    return lower.replaceAll(RegExp(r'\s+'), '_');
  }
}