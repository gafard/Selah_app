/// üß† Service de g√©n√©ration de prompts contextuels bas√©s sur FalconX
/// 
/// Utilise l'analyse s√©mantique FalconX pour g√©n√©rer des questions de r√©flexion
/// adapt√©es au passage biblique et √† la fondation spirituelle du jour.
/// 
/// Int√©gration avec :
/// - SemanticPassageBoundaryService (FalconX)
/// - SpiritualFoundation (fondation du jour)
/// - BibleTextService (contenu du passage)

import 'semantic_passage_boundary_service.dart';
import '../models/spiritual_foundation.dart';

class ContextualPromptsService {
  
  /// üéØ G√©n√®re des prompts contextuels bas√©s sur l'analyse FalconX
  /// 
  /// [passageRef] : R√©f√©rence du passage (ex: "Jean 14:1-19")
  /// [foundation] : Fondation spirituelle du jour (optionnel)
  /// [userLevel] : Niveau de l'utilisateur (d√©butant, interm√©diaire, avanc√©)
  /// 
  /// Retourne : Liste de prompts adapt√©s au contexte s√©mantique
  static Future<List<ContextualPrompt>> generateContextualPrompts({
    required String passageRef,
    SpiritualFoundation? foundation,
    String userLevel = 'interm√©diaire',
  }) async {
    try {
      // 1. Analyser le passage avec FalconX
      final semanticContext = await _analyzePassageWithFalconX(passageRef);
      
      // 2. G√©n√©rer des prompts bas√©s sur le contexte s√©mantique
      final semanticPrompts = _generateSemanticPrompts(semanticContext, userLevel);
      
      // 3. Int√©grer la fondation spirituelle si disponible
      final foundationPrompts = foundation != null 
          ? _generateFoundationPrompts(foundation, semanticContext)
          : <ContextualPrompt>[];
      
      // 4. G√©n√©rer des prompts vari√©s pour plus de diversit√©
      final variedPrompts = _generateVariedPrompts(passageRef, userLevel);
      
      // 5. Combiner tous les prompts
      final allPrompts = [...semanticPrompts, ...foundationPrompts, ...variedPrompts];
      
      // 6. M√©langer pour √©viter la r√©p√©tition
      allPrompts.shuffle();
      
      // 7. Prioriser et limiter selon le niveau
      return _prioritizePrompts(allPrompts, userLevel);
      
    } catch (e) {
      print('‚ö†Ô∏è Erreur g√©n√©ration prompts contextuels: $e');
      return _getFallbackPrompts();
    }
  }
  
  /// üîç Analyse le passage avec FalconX
  static Future<SemanticContext?> _analyzePassageWithFalconX(String passageRef) async {
    try {
      // Extraire livre et chapitre de la r√©f√©rence
      final parts = passageRef.split(' ');
      if (parts.length < 2) return null;
      
      final book = parts[0];
      final chapterPart = parts[1].split(':')[0];
      final chapter = int.tryParse(chapterPart);
      if (chapter == null) return null;
      
      // Utiliser FalconX pour trouver l'unit√© s√©mantique
      final unit = SemanticPassageBoundaryService.findUnitContaining(book, chapter);
      if (unit == null) return null;
      
      return SemanticContext(
        unitName: unit.name,
        priority: unit.priority.name,
        theme: unit.theme ?? '',
        liturgicalContext: unit.liturgicalContext,
        emotionalTones: unit.emotionalTones ?? [],
        annotation: unit.annotation,
      );
    } catch (e) {
      print('‚ö†Ô∏è Erreur analyse FalconX: $e');
      return null;
    }
  }
  
  /// üé® G√©n√®re des prompts bas√©s sur le contexte s√©mantique
  static List<ContextualPrompt> _generateSemanticPrompts(
    SemanticContext? context, 
    String userLevel
  ) {
    if (context == null) return [];
    
    final prompts = <ContextualPrompt>[];
    
    // Prompts bas√©s sur le th√®me
    if (context.theme.isNotEmpty) {
      prompts.addAll(_generateThemePrompts(context.theme, userLevel));
    }
    
    // Prompts bas√©s sur les tons √©motionnels
    for (final tone in context.emotionalTones) {
      prompts.addAll(_generateEmotionalPrompts(tone, userLevel));
    }
    
    // Prompts bas√©s sur le contexte liturgique
    if (context.liturgicalContext != null && context.liturgicalContext!.isNotEmpty) {
      prompts.addAll(_generateLiturgicalPrompts(context.liturgicalContext!, userLevel));
    }
    
    // Prompts bas√©s sur l'annotation
    if (context.annotation != null && context.annotation!.isNotEmpty) {
      prompts.addAll(_generateAnnotationPrompts(context.annotation!, userLevel));
    }
    
    return prompts;
  }
  
  /// üåü G√©n√®re des prompts bas√©s sur la fondation spirituelle
  static List<ContextualPrompt> _generateFoundationPrompts(
    SpiritualFoundation foundation,
    SemanticContext? semanticContext
  ) {
    final prompts = <ContextualPrompt>[];
    
    // Prompts bas√©s sur le titre de la fondation
    prompts.add(ContextualPrompt(
      text: 'Comment ${foundation.name} r√©sonne-t-il avec ce passage ?',
      category: 'fondation',
      priority: 1,
      context: 'Fondation spirituelle',
    ));
    
    // Prompts bas√©s sur la description
    if (foundation.shortDescription.isNotEmpty) {
      prompts.add(ContextualPrompt(
        text: 'En quoi ce passage illustre-t-il : "${foundation.shortDescription}" ?',
        category: 'fondation',
        priority: 2,
        context: 'Description de la fondation',
      ));
    }
    
    // Prompts bas√©s sur le verset de r√©f√©rence
    if (foundation.verseReference.isNotEmpty) {
      prompts.add(ContextualPrompt(
        text: 'Comment ce passage se connecte-t-il au verset cl√© : "${foundation.verseReference}" ?',
        category: 'fondation',
        priority: 1,
        context: 'Verset cl√© de la fondation',
      ));
    }
    
    // Prompts bas√©s sur le ton de pri√®re
    if (foundation.prayerTone.isNotEmpty) {
      prompts.add(ContextualPrompt(
        text: 'Comment ce passage m\'aide-t-il √† prier avec un ton de ${foundation.prayerTone} ?',
        category: 'fondation',
        priority: 2,
        context: 'Ton de pri√®re de la fondation',
      ));
    }
    
    return prompts;
  }
  
  /// üé® G√©n√®re des prompts bas√©s sur le th√®me
  static List<ContextualPrompt> _generateThemePrompts(String theme, String userLevel) {
    final prompts = <ContextualPrompt>[];
    
    switch (theme.toLowerCase()) {
      case 'incarnation':
        prompts.addAll([
          ContextualPrompt(
            text: 'Comment ce passage r√©v√®le-t-il l\'incarnation de Dieu ?',
            category: 'th√®me',
            priority: 1,
            context: 'Th√®me: Incarnation',
          ),
          ContextualPrompt(
            text: 'Qu\'est-ce que cela signifie que Dieu soit devenu homme ?',
            category: 'th√®me',
            priority: 2,
            context: 'Th√®me: Incarnation',
          ),
        ]);
        break;
        
      case 'r√©demption':
        prompts.addAll([
          ContextualPrompt(
            text: 'Comment ce passage montre-t-il l\'≈ìuvre de r√©demption ?',
            category: 'th√®me',
            priority: 1,
            context: 'Th√®me: R√©demption',
          ),
          ContextualPrompt(
            text: 'Qu\'est-ce que ce passage m\'apprend sur le prix de ma r√©demption ?',
            category: 'th√®me',
            priority: 2,
            context: 'Th√®me: R√©demption',
          ),
        ]);
        break;
        
      case 'royaume de dieu':
        prompts.addAll([
          ContextualPrompt(
            text: 'Comment ce passage d√©crit-il le Royaume de Dieu ?',
            category: 'th√®me',
            priority: 1,
            context: 'Th√®me: Royaume de Dieu',
          ),
          ContextualPrompt(
            text: 'Qu\'est-ce que cela signifie de vivre selon les valeurs du Royaume ?',
            category: 'th√®me',
            priority: 2,
            context: 'Th√®me: Royaume de Dieu',
          ),
        ]);
        break;
        
      case 'sagesse':
        prompts.addAll([
          ContextualPrompt(
            text: 'Quelle sagesse pratique ce passage m\'offre-t-il ?',
            category: 'th√®me',
            priority: 1,
            context: 'Th√®me: Sagesse',
          ),
          ContextualPrompt(
            text: 'Comment puis-je appliquer cette sagesse dans ma vie quotidienne ?',
            category: 'th√®me',
            priority: 2,
            context: 'Th√®me: Sagesse',
          ),
        ]);
        break;
        
      default:
        prompts.add(ContextualPrompt(
          text: 'Comment ce passage illustre-t-il le th√®me de "$theme" ?',
          category: 'th√®me',
          priority: 2,
          context: 'Th√®me: $theme',
        ));
    }
    
    return prompts;
  }
  
  /// üé≠ G√©n√®re des prompts bas√©s sur les tons √©motionnels
  static List<ContextualPrompt> _generateEmotionalPrompts(String tone, String userLevel) {
    final prompts = <ContextualPrompt>[];
    
    switch (tone.toLowerCase()) {
      case 'wonder':
        prompts.add(ContextualPrompt(
          text: 'Qu\'est-ce qui m\'√©merveille dans ce passage ?',
          category: '√©motion',
          priority: 2,
          context: 'Ton: √âmerveillement',
        ));
        break;
        
      case 'joy':
        prompts.add(ContextualPrompt(
          text: 'Comment ce passage peut-il augmenter ma joie ?',
          category: '√©motion',
          priority: 2,
          context: 'Ton: Joie',
        ));
        break;
        
      case 'peace':
        prompts.add(ContextualPrompt(
          text: 'Comment ce passage m\'apporte-t-il la paix ?',
          category: '√©motion',
          priority: 2,
          context: 'Ton: Paix',
        ));
        break;
        
      case 'hope':
        prompts.add(ContextualPrompt(
          text: 'Quel espoir ce passage me donne-t-il ?',
          category: '√©motion',
          priority: 2,
          context: 'Ton: Espoir',
        ));
        break;
        
      case 'sacrifice':
        prompts.add(ContextualPrompt(
          text: 'Qu\'est-ce que ce passage m\'enseigne sur le sacrifice ?',
          category: '√©motion',
          priority: 2,
          context: 'Ton: Sacrifice',
        ));
        break;
        
      case 'love':
        prompts.add(ContextualPrompt(
          text: 'Comment ce passage r√©v√®le-t-il l\'amour de Dieu ?',
          category: '√©motion',
          priority: 2,
          context: 'Ton: Amour',
        ));
        break;
    }
    
    return prompts;
  }
  
  /// ‚õ™ G√©n√®re des prompts bas√©s sur le contexte liturgique
  static List<ContextualPrompt> _generateLiturgicalPrompts(String liturgicalContext, String userLevel) {
    final prompts = <ContextualPrompt>[];
    
    if (liturgicalContext.toLowerCase().contains('no√´l')) {
      prompts.add(ContextualPrompt(
        text: 'Comment ce passage s\'inscrit-il dans la joie de No√´l ?',
        category: 'liturgie',
        priority: 1,
        context: 'Contexte: No√´l',
      ));
    } else if (liturgicalContext.toLowerCase().contains('p√¢ques')) {
      prompts.add(ContextualPrompt(
        text: 'Comment ce passage c√©l√®bre-t-il la victoire de P√¢ques ?',
        category: 'liturgie',
        priority: 1,
        context: 'Contexte: P√¢ques',
      ));
    } else if (liturgicalContext.toLowerCase().contains('car√™me')) {
      prompts.add(ContextualPrompt(
        text: 'Comment ce passage m\'accompagne-t-il dans le Car√™me ?',
        category: 'liturgie',
        priority: 1,
        context: 'Contexte: Car√™me',
      ));
    }
    
    return prompts;
  }
  
  /// üìù G√©n√®re des prompts bas√©s sur l'annotation
  static List<ContextualPrompt> _generateAnnotationPrompts(String annotation, String userLevel) {
    final prompts = <ContextualPrompt>[];
    
    // Extraire des mots-cl√©s de l'annotation pour g√©n√©rer des prompts
    if (annotation.toLowerCase().contains('b√©atitudes')) {
      prompts.add(ContextualPrompt(
        text: 'Comment puis-je vivre les B√©atitudes dans ma vie ?',
        category: 'annotation',
        priority: 1,
        context: 'Annotation: B√©atitudes',
      ));
    } else if (annotation.toLowerCase().contains('miracles')) {
      prompts.add(ContextualPrompt(
        text: 'Quel miracle de Dieu ai-je besoin aujourd\'hui ?',
        category: 'annotation',
        priority: 2,
        context: 'Annotation: Miracles',
      ));
    } else if (annotation.toLowerCase().contains('paraboles')) {
      prompts.add(ContextualPrompt(
        text: 'Quelle le√ßon cette parabole m\'enseigne-t-elle ?',
        category: 'annotation',
        priority: 2,
        context: 'Annotation: Paraboles',
      ));
    }
    
    return prompts;
  }
  
  /// üéØ Priorise les prompts selon le niveau utilisateur
  static List<ContextualPrompt> _prioritizePrompts(List<ContextualPrompt> prompts, String userLevel) {
    // Limiter selon le niveau utilisateur
    int maxPrompts;
    switch (userLevel.toLowerCase()) {
      case 'd√©butant':
        maxPrompts = 3;
        break;
      case 'interm√©diaire':
        maxPrompts = 5;
        break;
      case 'avanc√©':
        maxPrompts = 7;
        break;
      default:
        maxPrompts = 5;
    }
    
    // Assurer la diversit√© en prenant des prompts de diff√©rentes cat√©gories
    final categorizedPrompts = <String, List<ContextualPrompt>>{};
    for (final prompt in prompts) {
      categorizedPrompts.putIfAbsent(prompt.category, () => []).add(prompt);
    }
    
    final selectedPrompts = <ContextualPrompt>[];
    
    // Prendre au moins un prompt de chaque cat√©gorie disponible
    for (final category in categorizedPrompts.keys) {
      if (selectedPrompts.length >= maxPrompts) break;
      final categoryPrompts = categorizedPrompts[category]!;
      if (categoryPrompts.isNotEmpty) {
        selectedPrompts.add(categoryPrompts.first);
      }
    }
    
    // Compl√©ter avec les prompts restants si n√©cessaire
    if (selectedPrompts.length < maxPrompts) {
      final remainingPrompts = prompts.where((p) => !selectedPrompts.contains(p)).toList();
      selectedPrompts.addAll(remainingPrompts.take(maxPrompts - selectedPrompts.length));
    }
    
    return selectedPrompts;
  }
  
  /// üîÑ Prompts de secours si l'analyse √©choue
  static List<ContextualPrompt> _getFallbackPrompts() {
    return [
      ContextualPrompt(
        text: 'Qu\'est-ce que ce passage me dit aujourd\'hui ?',
        category: 'g√©n√©ral',
        priority: 1,
        context: 'Prompts g√©n√©raux',
      ),
      ContextualPrompt(
        text: 'Comment puis-je appliquer ce passage dans ma vie ?',
        category: 'g√©n√©ral',
        priority: 2,
        context: 'Prompts g√©n√©raux',
      ),
      ContextualPrompt(
        text: 'Qu\'est-ce que ce passage r√©v√®le sur le caract√®re de Dieu ?',
        category: 'g√©n√©ral',
        priority: 2,
        context: 'Prompts g√©n√©raux',
      ),
    ];
  }

  /// üé≤ G√©n√®re des prompts vari√©s et diversifi√©s
  static List<ContextualPrompt> _generateVariedPrompts(String passageRef, String userLevel) {
    final prompts = <ContextualPrompt>[];
    
    // Prompts vari√©s selon le niveau utilisateur
    final generalPrompts = [
      'Quel verset me touche le plus dans ce passage ?',
      'Comment ce passage transforme-t-il ma vision de Dieu ?',
      'Quelle promesse divine puis-je retenir ici ?',
      'Comment ce passage m\'encourage-t-il aujourd\'hui ?',
      'Qu\'est-ce que J√©sus me dit personnellement ?',
      'Comment puis-je partager cette v√©rit√© avec d\'autres ?',
      'Quelle pri√®re ce passage m\'inspire-t-il ?',
      'Comment ce passage change-t-il ma perspective ?',
      'Quel d√©fi ce passage me lance-t-il ?',
      'Comment puis-je vivre cette v√©rit√© concr√®tement ?',
    ];
    
    // Prompts pour niveau avanc√©
    if (userLevel.toLowerCase() == 'avanc√©') {
      generalPrompts.addAll([
        'Comment ce passage s\'inscrit-il dans le plan de Dieu ?',
        'Quelles sont les implications th√©ologiques de ce texte ?',
        'Comment ce passage √©claire-t-il d\'autres passages bibliques ?',
        'Quelle est la signification historique de ce passage ?',
        'Comment ce passage r√©v√®le-t-il la nature trinitaire de Dieu ?',
      ]);
    }
    
    // M√©langer et s√©lectionner 3-5 prompts al√©atoires
    generalPrompts.shuffle();
    final selectedPrompts = generalPrompts.take(userLevel.toLowerCase() == 'd√©butant' ? 3 : 5).toList();
    
    for (int i = 0; i < selectedPrompts.length; i++) {
      prompts.add(ContextualPrompt(
        text: selectedPrompts[i],
        category: 'vari√©',
        priority: i + 1,
        context: 'Prompts vari√©s',
      ));
    }
    
    return prompts;
  }
}

/// üéØ Mod√®le pour un prompt contextuel
class ContextualPrompt {
  final String text;
  final String category;
  final int priority; // 1 = plus important
  final String context;
  
  const ContextualPrompt({
    required this.text,
    required this.category,
    required this.priority,
    required this.context,
  });
}

/// üß† Contexte s√©mantique extrait par FalconX
class SemanticContext {
  final String unitName;
  final String priority;
  final String theme;
  final String? liturgicalContext;
  final List<String> emotionalTones;
  final String? annotation;
  
  const SemanticContext({
    required this.unitName,
    required this.priority,
    required this.theme,
    this.liturgicalContext,
    required this.emotionalTones,
    this.annotation,
  });
}
