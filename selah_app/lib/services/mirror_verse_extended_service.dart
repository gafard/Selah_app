import 'dart:convert';
import 'package:flutter/services.dart';
import 'package:hive/hive.dart';
import 'mirror_verse_service.dart';

/// Service √©tendu pour les connexions typologiques
/// G√®re 1,800+ connexions au lieu de 36
class MirrorVerseExtendedService {
  static Box? _extendedMirrorsBox;
  static Map<String, dynamic>? _extendedMirrorsData;
  static bool _isLoading = false;

  /// Initialise le service √©tendu
  static Future<void> init() async {
    if (_extendedMirrorsBox != null || _isLoading) return;
    
    print('üîÑ Initialisation MirrorVerseExtendedService...');
    _isLoading = true;
    try {
      // Initialiser la box Hive √©tendue
      _extendedMirrorsBox = await Hive.openBox('bible_mirrors_extended');
      print('üì¶ Box Hive √©tendue ouverte');
      
      // Charger les donn√©es √©tendues depuis assets
      await _loadExtendedData();
      
      // Hydrater la box si n√©cessaire
      await _hydrateExtendedBox();
      
      print('‚úÖ MirrorVerseExtendedService initialis√© (${_extendedMirrorsBox?.length ?? 0} entr√©es)');
    } catch (e) {
      print('‚ö†Ô∏è Erreur initialisation MirrorVerseExtendedService: $e');
    } finally {
      _isLoading = false;
    }
  }

  /// Charge les donn√©es √©tendues depuis assets
  static Future<void> _loadExtendedData() async {
    try {
      final String jsonString = await rootBundle.loadString('assets/jsons/mirrors_extended.json');
      _extendedMirrorsData = json.decode(jsonString);
      print('üìö Donn√©es √©tendues charg√©es: ${_extendedMirrorsData?.length ?? 0} connexions');
      
      // V√©rifier le format des donn√©es
      if (_extendedMirrorsData != null && _extendedMirrorsData!.isNotEmpty) {
        final firstKey = _extendedMirrorsData!.keys.first;
        final firstValue = _extendedMirrorsData![firstKey];
        print('üîç Format d√©tect√©: ${firstValue.runtimeType} (exemple: $firstKey ‚Üí $firstValue)');
      }
    } catch (e) {
      print('‚ö†Ô∏è Erreur chargement donn√©es √©tendues: $e');
      _extendedMirrorsData = {};
    }
  }

  /// Hydrate la box avec les donn√©es √©tendues
  static Future<void> _hydrateExtendedBox() async {
    if (_extendedMirrorsData == null || _extendedMirrorsBox == null) return;
    
    try {
      // V√©rifier si d√©j√† hydrat√©
      if (_extendedMirrorsBox!.isNotEmpty) {
        print('üì¶ Box √©tendue d√©j√† hydrat√©e');
        return;
      }

      // Hydrater avec les donn√©es √©tendues
      for (final entry in _extendedMirrorsData!.entries) {
        await _extendedMirrorsBox!.put(entry.key, entry.value);
      }
      
      print('‚úÖ Box √©tendue hydrat√©e avec ${_extendedMirrorsData!.length} connexions');
    } catch (e) {
      print('‚ö†Ô∏è Erreur hydratation box √©tendue: $e');
    }
  }

  /// R√©cup√®re le verset miroir √©tendu d'un verset
  ///
  /// [id] : ID du verset (ex: "Gen√®se.1.1")
  ///
  /// Retourne : ID du verset miroir ou null
  static Future<String?> extendedMirrorOf(String id) async {
    try {
      // Chercher dans les donn√©es √©tendues
      final forward = _extendedMirrorsBox?.get(id) as String?;
      if (forward != null) return forward;

      // Chercher en sens inverse
      final allKeys = _extendedMirrorsBox?.keys ?? [];
      for (final key in allKeys) {
        final value = _extendedMirrorsBox?.get(key) as String?;
        if (value == id) return key as String;
      }

      return null;
    } catch (e) {
      print('‚ö†Ô∏è Erreur extendedMirrorOf($id): $e');
      return null;
    }
  }

  /// R√©cup√®re le verset miroir enrichi √©tendu
  ///
  /// [id] : ID du verset
  /// [getVerseText] : Fonction pour r√©cup√©rer le texte
  ///
  /// Retourne : MirrorVerse enrichi ou null
  static Future<MirrorVerse?> enrichedExtendedMirror(
    String id, {
    required Future<String?> Function(String verseId) getVerseText,
  }) async {
    final mirrorId = await extendedMirrorOf(id);
    if (mirrorId == null) return null;

    final originalText = await getVerseText(id);
    final mirrorText = await getVerseText(mirrorId);
    final connection = _getExtendedConnectionType(id, mirrorId);

    return MirrorVerse(
      originalId: id,
      mirrorId: mirrorId,
      originalText: originalText,
      mirrorText: mirrorText,
      connectionType: connection,
      explanation: _getExtendedExplanation(id, mirrorId),
    );
  }

  /// D√©termine le type de connexion √©tendue
  static ConnectionType _getExtendedConnectionType(String originalId, String mirrorId) {
    final originalBook = originalId.split('.')[0];
    final mirrorBook = mirrorId.split('.').first;
    
    // Connexions proph√©tiques majeures
    if (_isPropheticConnection(originalId, mirrorId)) {
      return ConnectionType.prophecyFulfillment;
    }
    
    // Connexions typologiques
    if (_isTypologicalConnection(originalId, mirrorId)) {
      return ConnectionType.typology;
    }
    
    // Connexions th√©matiques
    if (_isThematicConnection(originalId, mirrorId)) {
      return ConnectionType.echo;
    }
    
    // Connexions litt√©raires
    if (_isLiteraryConnection(originalId, mirrorId)) {
      return ConnectionType.echo;
    }
    
    // Connexions historiques
    if (_isHistoricalConnection(originalId, mirrorId)) {
      return ConnectionType.parallel;
    }
    
    return ConnectionType.parallel;
  }

  /// V√©rifie si c'est une connexion proph√©tique
  static bool _isPropheticConnection(String originalId, String mirrorId) {
    final propheticBooks = ['√âsa√Øe', 'J√©r√©mie', '√âz√©chiel', 'Daniel', 'Os√©e', 'Jo√´l', 'Amos', 'Abdias', 'Jonas', 'Mich√©e', 'Nahum', 'Habacuc', 'Sophonie', 'Agg√©e', 'Zacharie', 'Malachie'];
    final originalBook = originalId.split('.')[0];
    final mirrorBook = mirrorId.split('.').first;
    
    return propheticBooks.contains(originalBook) && 
           ['Matthieu', 'Marc', 'Luc', 'Jean', 'Actes', 'Romains', '1Corinthiens', '2Corinthiens', 'Galates', '√âph√©siens', 'Philippiens', 'Colossiens', '1Thessaloniciens', '2Thessaloniciens', '1Timoth√©e', '2Timoth√©e', 'Tite', 'Phil√©mon', 'H√©breux', 'Jacques', '1Pierre', '2Pierre', '1Jean', '2Jean', '3Jean', 'Jude', 'Apocalypse'].contains(mirrorBook);
  }

  /// V√©rifie si c'est une connexion typologique
  static bool _isTypologicalConnection(String originalId, String mirrorId) {
    final typologicalPairs = [
      ['Gen√®se', 'Matthieu'], ['Exode', 'Jean'], ['L√©vitique', 'H√©breux'],
      ['Nombres', '1Corinthiens'], ['Deut√©ronome', 'Galates'], ['Josu√©', 'Actes'],
      ['Juges', '2Corinthiens'], ['Ruth', '√âph√©siens'], ['1Samuel', 'Philippiens'],
      ['2Samuel', 'Colossiens'], ['1Rois', '1Thessaloniciens'], ['2Rois', '2Thessaloniciens'],
      ['1Chroniques', '1Timoth√©e'], ['2Chroniques', '2Timoth√©e'], ['Esdras', 'Tite'],
      ['N√©h√©mie', 'Phil√©mon'], ['Esther', 'H√©breux'], ['Job', 'Jacques'],
      ['Psaumes', '1Pierre'], ['Proverbes', '2Pierre'], ['Eccl√©siaste', '1Jean'],
      ['Cantique', '2Jean'], ['√âsa√Øe', '3Jean'], ['J√©r√©mie', 'Jude'],
      ['Lamentations', 'Apocalypse'], ['√âz√©chiel', 'Marc'], ['Daniel', 'Luc']
    ];
    
    final originalBook = originalId.split('.')[0];
    final mirrorBook = mirrorId.split('.').first;
    
    return typologicalPairs.any((pair) => 
      pair[0] == originalBook && pair[1] == mirrorBook);
  }

  /// V√©rifie si c'est une connexion th√©matique
  static bool _isThematicConnection(String originalId, String mirrorId) {
    // Logique pour identifier les connexions th√©matiques
    // Bas√©e sur des mots-cl√©s communs, des concepts similaires, etc.
    return false; // √Ä impl√©menter selon les besoins
  }

  /// V√©rifie si c'est une connexion litt√©raire
  static bool _isLiteraryConnection(String originalId, String mirrorId) {
    // Logique pour identifier les √©chos litt√©raires
    // Bas√©e sur des structures similaires, des motifs r√©currents, etc.
    return false; // √Ä impl√©menter selon les besoins
  }

  /// V√©rifie si c'est une connexion historique
  static bool _isHistoricalConnection(String originalId, String mirrorId) {
    // Logique pour identifier les r√©f√©rences historiques
    // Bas√©e sur des √©v√©nements, des personnages, des lieux communs
    return false; // √Ä impl√©menter selon les besoins
  }

  /// G√©n√®re une explication √©tendue
  static String _getExtendedExplanation(String originalId, String mirrorId) {
    final originalBook = originalId.split('.')[0];
    final mirrorBook = mirrorId.split('.').first;
    
    if (_isPropheticConnection(originalId, mirrorId)) {
      return 'Cette proph√©tie de $originalBook trouve son accomplissement dans $mirrorBook, d√©montrant la continuit√© divine entre l\'Ancien et le Nouveau Testament.';
    }
    
    if (_isTypologicalConnection(originalId, mirrorId)) {
      return 'Ce passage de $originalBook pr√©figure le message de $mirrorBook, illustrant la typologie biblique o√π l\'AT annonce le NT.';
    }
    
    return 'Cette connexion entre $originalBook et $mirrorBook r√©v√®le l\'unit√© profonde des √âcritures et la coh√©rence du plan divin.';
  }

  /// Recherche √©tendue par th√®me
  static Future<List<Map<String, String>>> searchByTheme(String theme) async {
    final results = <Map<String, String>>[];
    
    if (_extendedMirrorsBox == null) return results;
    
    try {
      final allKeys = _extendedMirrorsBox!.keys;
      for (final key in allKeys) {
        final value = _extendedMirrorsBox!.get(key) as String?;
        if (value != null) {
          // Logique de recherche par th√®me
          // √Ä impl√©menter selon les besoins
        }
      }
    } catch (e) {
      print('‚ö†Ô∏è Erreur recherche par th√®me: $e');
    }
    
    return results;
  }

  /// Recherche √©tendue par livre
  static Future<List<Map<String, String>>> searchByBook(String book) async {
    final results = <Map<String, String>>[];
    
    if (_extendedMirrorsBox == null) return results;
    
    try {
      final allKeys = _extendedMirrorsBox!.keys;
      for (final key in allKeys) {
        final value = _extendedMirrorsBox!.get(key) as String?;
        if (value != null && (key.toString().startsWith(book) || value.startsWith(book))) {
          results.add({
            'original': key.toString(),
            'mirror': value,
            'connection': _getExtendedConnectionType(key.toString(), value).toString(),
          });
        }
      }
    } catch (e) {
      print('‚ö†Ô∏è Erreur recherche par livre: $e');
    }
    
    return results;
  }

  /// Statistiques √©tendues
  static Future<Map<String, int>> getExtendedStats() async {
    if (_extendedMirrorsBox == null) return {};
    
    final stats = <String, int>{
      'total_connections': _extendedMirrorsBox!.length,
      'prophetic': 0,
      'typological': 0,
      'thematic': 0,
      'literary': 0,
      'historical': 0,
    };
    
    try {
      final allKeys = _extendedMirrorsBox!.keys;
      for (final key in allKeys) {
        final value = _extendedMirrorsBox!.get(key) as String?;
        if (value != null) {
          final connectionType = _getExtendedConnectionType(key.toString(), value);
          switch (connectionType) {
            case ConnectionType.prophecyFulfillment:
              stats['prophetic'] = (stats['prophetic'] ?? 0) + 1;
              break;
            case ConnectionType.typology:
              stats['typological'] = (stats['typological'] ?? 0) + 1;
              break;
            case ConnectionType.echo:
              stats['thematic'] = (stats['thematic'] ?? 0) + 1;
              break;
            case ConnectionType.parallel:
              stats['literary'] = (stats['literary'] ?? 0) + 1;
              break;
            default:
              stats['historical'] = (stats['historical'] ?? 0) + 1;
              break;
          }
        }
      }
    } catch (e) {
      print('‚ö†Ô∏è Erreur calcul statistiques: $e');
    }
    
    return stats;
  }

  /// R√©initialise les donn√©es √©tendues
  static Future<void> resetExtendedData() async {
    try {
      await _extendedMirrorsBox?.clear();
      await _loadExtendedData();
      await _hydrateExtendedBox();
      print('‚úÖ Donn√©es √©tendues r√©initialis√©es');
    } catch (e) {
      print('‚ö†Ô∏è Erreur r√©initialisation donn√©es √©tendues: $e');
    }
  }
}
