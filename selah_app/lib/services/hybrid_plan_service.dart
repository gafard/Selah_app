import 'package:flutter/material.dart';
import '../models/thompson_plan_models.dart';
import '../models/plan_preset.dart';
import 'bible_plan_api_service.dart';
import 'thompson_plan_service.dart';
import 'image_service.dart';

/// Service hybride qui combine la logique Thompson 21 avec l'API biblereadingplangenerator.com
/// G√©n√®re des plans de lecture r√©els bas√©s sur les th√®mes Thompson
class HybridPlanService {
  final ThompsonPlanService _thompsonService;
  final BiblePlanApiService _bibleApiService;
  
  HybridPlanService({
    required ThompsonPlanService thompsonService,
    required BiblePlanApiService bibleApiService,
  }) : _thompsonService = thompsonService,
       _bibleApiService = bibleApiService;

  /// G√©n√®re un plan hybride : th√®mes Thompson + plan de lecture r√©el
  static Future<HybridPlanResult> generateHybridPlan(CompleteProfile profile) async {
    try {
      print('üîÑ G√©n√©ration plan hybride Thompson + API...');
      
      // 1. G√©n√©rer le plan Thompson pour les th√®mes et la structure
      final thompsonService = ThompsonPlanService(imageService: ImageService());
      await thompsonService.initialize();
      final thompsonPlan = await thompsonService.generatePlan(profile);
      
      // 2. Extraire les th√®mes Thompson
      final themeKeys = thompsonPlan.meta['themeKeys'] as List<dynamic>? ?? [];
      final primaryTheme = themeKeys.isNotEmpty ? themeKeys.first as String : 'spiritual_demand';
      
      print('üéØ Th√®me principal: $primaryTheme');
      
      // 3. G√©n√©rer le plan de lecture r√©el via l'API
      final biblePlanResponse = await BiblePlanApiService.generateThompsonBasedPlan(
        profile: profile,
        thompsonTheme: primaryTheme,
        customPlanName: thompsonPlan.title,
      );
      
      if (!biblePlanResponse.success) {
        print('‚ùå √âchec g√©n√©ration plan API: ${biblePlanResponse.error}');
        // Fallback vers le plan Thompson uniquement
        return HybridPlanResult(
          success: true,
          planPreset: _convertThompsonToPlanPreset(thompsonPlan),
          thompsonPlan: thompsonPlan,
          biblePlanResponse: null,
          isHybrid: false,
        );
      }
      
      print('‚úÖ Plan hybride g√©n√©r√© avec succ√®s');
      
      // 4. Cr√©er un PlanPreset combin√©
      final hybridPreset = _createHybridPreset(thompsonPlan, biblePlanResponse, primaryTheme);
      
      return HybridPlanResult(
        success: true,
        planPreset: hybridPreset,
        thompsonPlan: thompsonPlan,
        biblePlanResponse: biblePlanResponse,
        isHybrid: true,
      );
      
    } catch (e) {
      print('‚ùå Erreur g√©n√©ration plan hybride: $e');
      return HybridPlanResult(
        success: false,
        error: e.toString(),
      );
    }
  }
  
  /// Convertit un plan Thompson en PlanPreset
  static PlanPreset _convertThompsonToPlanPreset(ThompsonPlanPreset thompsonPlan) {
    return PlanPreset(
      slug: thompsonPlan.id,
      name: thompsonPlan.title,
      durationDays: thompsonPlan.durationDays,
      order: 'thematic',
      books: 'OT,NT',
      coverImage: thompsonPlan.meta['coverImage'] as String?,
      minutesPerDay: thompsonPlan.meta['minutesPerDay'] as int?,
      recommended: [PresetLevel.regular],
      description: thompsonPlan.description,
      gradient: _getThompsonGradient(thompsonPlan.meta['themeKeys'] as List<dynamic>?),
      specificBooks: _getSpecificBooksForTheme(thompsonPlan.meta['themeKeys'] as List<dynamic>?),
    );
  }
  
  /// Cr√©e un preset hybride combinant Thompson et API
  static PlanPreset _createHybridPreset(
    ThompsonPlanPreset thompsonPlan,
    BiblePlanResponse biblePlanResponse,
    String primaryTheme,
  ) {
    return PlanPreset(
      slug: 'hybrid_${thompsonPlan.id}',
      name: biblePlanResponse.planName ?? thompsonPlan.title,
      durationDays: biblePlanResponse.totalDays ?? thompsonPlan.durationDays,
      order: 'hybrid', // Nouveau type pour les plans hybrides
      books: biblePlanResponse.books ?? 'OT,NT',
      coverImage: thompsonPlan.meta['coverImage'] as String?,
      minutesPerDay: thompsonPlan.meta['minutesPerDay'] as int?,
      recommended: [PresetLevel.regular],
      description: _createHybridDescription(thompsonPlan, biblePlanResponse, primaryTheme),
      gradient: _getThompsonGradient(thompsonPlan.meta['themeKeys'] as List<dynamic>?),
      specificBooks: _getSpecificBooksForTheme(thompsonPlan.meta['themeKeys'] as List<dynamic>?),
    );
  }
  
  /// Cr√©e une description hybride
  static String _createHybridDescription(
    ThompsonPlanPreset thompsonPlan,
    BiblePlanResponse biblePlanResponse,
    String primaryTheme,
  ) {
    final themeNames = {
      'spiritual_demand': 'Exigence spirituelle',
      'no_worry': 'Paix du c≈ìur',
      'companionship': 'Communion fraternelle',
      'marriage_duties': 'Mariage selon Dieu',
      'prayer_life': 'Vie de pri√®re',
      'forgiveness': 'Pardon & gu√©rison',
      'faith_trials': 'Foi dans l\'√©preuve',
      'common_errors': 'Sagesse pratique',
    };
    
    final themeName = themeNames[primaryTheme] ?? 'Plan spirituel';
    final books = biblePlanResponse.books ?? 'OT,NT';
    final days = biblePlanResponse.totalDays ?? thompsonPlan.durationDays;
    
    return 'Plan de lecture biblique personnalis√© bas√© sur le th√®me "$themeName" de la Bible d\'√©tude Thompson 21. '
           'Parcours de $days jours √† travers $books avec des passages s√©lectionn√©s pour approfondir ce th√®me spirituel. '
           'Id√©al pour une m√©ditation quotidienne guid√©e par la Parole de Dieu.';
  }
  
  /// G√©n√®re un gradient pour les th√®mes Thompson
  static List<Color>? _getThompsonGradient(List<dynamic>? themeKeys) {
    if (themeKeys == null || themeKeys.isEmpty) return null;
    
    final themes = themeKeys.cast<String>();
    
    if (themes.contains('no_worry')) {
      return [const Color(0xFF4FD1C5), const Color(0xFF06B6D4)]; // Teal pour la paix
    }
    if (themes.contains('spiritual_demand')) {
      return [const Color(0xFF7C8CFF), const Color(0xFF6366F1)]; // Indigo pour la discipline
    }
    if (themes.contains('marriage_duties')) {
      return [const Color(0xFFEC4899), const Color(0xFFF472B6)]; // Rose pour le mariage
    }
    if (themes.contains('companionship')) {
      return [const Color(0xFF34D399), const Color(0xFF10B981)]; // Vert pour la communaut√©
    }
    if (themes.contains('prayer_life')) {
      return [const Color(0xFF8B5CF6), const Color(0xFFA78BFA)]; // Violet pour la pri√®re
    }
    if (themes.contains('forgiveness')) {
      return [const Color(0xFFF59E0B), const Color(0xFFFBBF24)]; // Orange pour le pardon
    }
    if (themes.contains('faith_trials')) {
      return [const Color(0xFFEF4444), const Color(0xFFF87171)]; // Rouge pour les √©preuves
    }
    
    return [const Color(0xFF6366F1), const Color(0xFF8B5CF6)];
  }

  /// G√©n√®re les livres sp√©cifiques pour un th√®me Thompson
  static String? _getSpecificBooksForTheme(List<dynamic>? themeKeys) {
    if (themeKeys == null || themeKeys.isEmpty) return null;
    
    final themes = themeKeys.cast<String>();
    
    // Livres sp√©cifiques aux th√®mes Thompson
    if (themes.contains('no_worry')) {
      return 'Matthieu 6, Psaumes 23, 27, 46, 91, 121';
    }
    if (themes.contains('spiritual_demand')) {
      return 'Matthieu 5-7, Romains 12-14, √âph√©siens 4-6';
    }
    if (themes.contains('marriage_duties')) {
      return 'Gen√®se 2, Proverbes 31, √âph√©siens 5, 1 Corinthiens 7';
    }
    if (themes.contains('companionship')) {
      return 'Gen√®se 2, Proverbes 18, Actes 2, 1 Corinthiens 13';
    }
    if (themes.contains('prayer_life')) {
      return 'Psaumes 1-50, Matthieu 6, Luc 11, √âph√©siens 6';
    }
    if (themes.contains('forgiveness')) {
      return 'Matthieu 18, Luc 15, √âph√©siens 4, Colossiens 3';
    }
    if (themes.contains('faith_trials')) {
      return 'Jacques 1, Romains 5, 1 Pierre 1, H√©breux 11';
    }
    if (themes.contains('common_errors')) {
      return 'Proverbes 1-10, Jacques 1-5, Galates 5';
    }
    
    return null;
  }
  
  /// Sauvegarde un plan hybride
  static Future<void> saveHybridPlan(HybridPlanResult result) async {
    if (!result.success) return;
    
    try {
      // Sauvegarder le plan Thompson
      if (result.thompsonPlan != null) {
        final thompsonService = ThompsonPlanService(imageService: ImageService());
        await thompsonService.initialize();
        await thompsonService.savePlan(result.thompsonPlan!);
      }
      
      // TODO: Sauvegarder le plan de lecture API (HTML ou donn√©es pars√©es)
      // Pour l'instant, on peut stocker l'URL ou le contenu HTML
      
      print('üíæ Plan hybride sauvegard√©');
    } catch (e) {
      print('‚ùå Erreur sauvegarde plan hybride: $e');
    }
  }
}

/// R√©sultat d'un plan hybride
class HybridPlanResult {
  final bool success;
  final String? error;
  final PlanPreset? planPreset;
  final ThompsonPlanPreset? thompsonPlan;
  final BiblePlanResponse? biblePlanResponse;
  final bool isHybrid; // true si combine Thompson + API, false si Thompson seul
  
  const HybridPlanResult({
    required this.success,
    this.error,
    this.planPreset,
    this.thompsonPlan,
    this.biblePlanResponse,
    this.isHybrid = false,
  });
}
