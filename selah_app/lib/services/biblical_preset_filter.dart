/// üïäÔ∏è SERVICE DE FILTRAGE BIBLIQUE DES PRESETS
/// 
/// Bas√© sur les crit√®res bibliques fondamentaux :
/// 1. La doctrine de Christ (1 Jean 4:1-3)
/// 2. L'autorit√© de la Bible (2 Timoth√©e 3:16, Apocalypse 22:18)
/// 3. L'√©vangile de J√©sus-Christ (Galates 1:6-9)
/// 
/// Ce service filtre et classe les presets selon leur alignement
/// avec la v√©rit√© biblique et la doctrine apostolique.
library;

import '../models/plan_preset.dart';

class BiblicalPresetFilter {
  
  /// üïäÔ∏è Crit√®res bibliques fondamentaux
  static const Map<String, List<String>> _biblicalCriteria = {
    // 1. Doctrine de Christ (1 Jean 4:1-3)
    'doctrine_christ': [
      'j√©sus est venu en chair',
      'j√©sus est le fils de dieu',
      'j√©sus est christ',
      'j√©sus est seigneur',
      'j√©sus est sauveur',
      'j√©sus est messie',
      'incarnation',
      'divinit√© de christ',
      'humanit√© de christ',
      'mort expiatoire',
      'r√©surrection',
      'ascension',
    ],
    
    // 2. Autorit√© de la Bible (2 Timoth√©e 3:16, Apocalypse 22:18)
    'authority_bible': [
      'inspiration divine',
      'infaillibilit√©',
      'autorit√© supr√™me',
      'parole de dieu',
      '√©criture sainte',
      'r√©v√©lation divine',
      'canon biblique',
      'int√©grit√© des √©critures',
      'v√©rit√© absolue',
      'norme de foi',
    ],
    
    // 3. √âvangile de J√©sus-Christ (Galates 1:6-9)
    'gospel_jesus': [
      'salut par gr√¢ce',
      'foi en j√©sus',
      'mort et r√©surrection',
      'r√©conciliation avec dieu',
      'nouvelle naissance',
      'justification par la foi',
      'r√©demption',
      'expiation',
      'adoption divine',
      'h√©ritage √©ternel',
      'royaume de dieu',
      'retour de christ',
    ],
  };
  
  /// üïäÔ∏è Livres bibliques par cat√©gorie doctrinale
  static const Map<String, List<String>> _doctrinalBooks = {
    'doctrine_christ': [
      'jean', 'matthieu', 'marc', 'luc', 'actes', 'romains', 'galates',
      'philippiens', 'colossiens', 'h√©breux', '1 jean', '2 jean', '3 jean',
      'apocalypse'
    ],
    'authority_bible': [
      'psaumes', 'proverbes', '√©ccl√©siaste', 'cantique', '2 timoth√©e',
      '2 pierre', 'jude', 'apocalypse'
    ],
    'gospel_jesus': [
      'matthieu', 'marc', 'luc', 'jean', 'actes', 'romains', 'galates',
      '√©ph√©siens', 'philippiens', 'colossiens', '1 thessaloniciens',
      '2 thessaloniciens', '1 timoth√©e', '2 timoth√©e', 'tite', 'phil√©mon',
      'h√©breux', 'jacques', '1 pierre', '2 pierre', '1 jean', '2 jean',
      '3 jean', 'jude', 'apocalypse'
    ],
  };
  
  /// üïäÔ∏è Filtre les presets selon les crit√®res bibliques
  static List<PlanPreset> filterPresetsByBiblicalCriteria(
    List<PlanPreset> presets,
    Map<String, dynamic> userProfile,
  ) {
    print('üïäÔ∏è Filtrage biblique des presets...');
    
    final filteredPresets = <PlanPreset>[];
    
    for (final preset in presets) {
      final biblicalScore = _calculateBiblicalScore(preset, userProfile);
      
      // Seuls les presets avec un score biblique √©lev√© sont retenus
      if (biblicalScore >= 0.7) {
        final enrichedPreset = _enrichPresetWithBiblicalData(preset, biblicalScore);
        filteredPresets.add(enrichedPreset);
      }
    }
    
    // Trier par score biblique d√©croissant
    filteredPresets.sort((a, b) {
      final scoreA = a.parameters?['biblical_score'] as double? ?? 0.0;
      final scoreB = b.parameters?['biblical_score'] as double? ?? 0.0;
      return scoreB.compareTo(scoreA);
    });
    
    print('üïäÔ∏è ${filteredPresets.length} presets filtr√©s selon les crit√®res bibliques');
    return filteredPresets;
  }
  
  /// üïäÔ∏è Calcule le score biblique d'un preset
  static double _calculateBiblicalScore(PlanPreset preset, Map<String, dynamic> userProfile) {
    double score = 0.0;
    int criteriaCount = 0;
    
    // 1. V√©rifier la doctrine de Christ
    final doctrineScore = _evaluateDoctrineOfChrist(preset);
    score += doctrineScore;
    criteriaCount++;
    
    // 2. V√©rifier l'autorit√© de la Bible
    final authorityScore = _evaluateBibleAuthority(preset);
    score += authorityScore;
    criteriaCount++;
    
    // 3. V√©rifier l'√©vangile de J√©sus-Christ
    final gospelScore = _evaluateGospelOfJesus(preset);
    score += gospelScore;
    criteriaCount++;
    
    // 4. V√©rifier l'alignement avec le profil utilisateur
    final alignmentScore = _evaluateUserAlignment(preset, userProfile);
    score += alignmentScore;
    criteriaCount++;
    
    return criteriaCount > 0 ? score / criteriaCount : 0.0;
  }
  
  /// üïäÔ∏è √âvalue l'alignement avec la doctrine de Christ
  static double _evaluateDoctrineOfChrist(PlanPreset preset) {
    double score = 0.0;
    
    // V√©rifier les livres inclus
    final books = preset.books.toLowerCase();
    final doctrinalBooks = _doctrinalBooks['doctrine_christ']!;
    
    int matchingBooks = 0;
    for (final book in doctrinalBooks) {
      if (books.contains(book)) {
        matchingBooks++;
      }
    }
    
    // Score bas√© sur la proportion de livres doctrinaux
    if (doctrinalBooks.isNotEmpty) {
      score = matchingBooks / doctrinalBooks.length;
    }
    
    // Bonus pour les presets centr√©s sur Christ
    if (preset.name.toLowerCase().contains('√©vangiles') ||
        preset.name.toLowerCase().contains('nouveau testament') ||
        preset.name.toLowerCase().contains('j√©sus')) {
      score = (score + 1.0) / 2; // Moyenne avec bonus
    }
    
    return score.clamp(0.0, 1.0);
  }
  
  /// üïäÔ∏è √âvalue l'alignement avec l'autorit√© de la Bible
  static double _evaluateBibleAuthority(PlanPreset preset) {
    double score = 0.0;
    
    // V√©rifier si le preset couvre toute la Bible
    if (preset.books.toLowerCase().contains('toute') ||
        preset.books.toLowerCase().contains('compl√®te') ||
        preset.books.toLowerCase().contains('bible enti√®re')) {
      score = 1.0;
    } else {
      // Score bas√© sur la diversit√© des livres
      final books = preset.books.toLowerCase();
      final authorityBooks = _doctrinalBooks['authority_bible']!;
      
      int matchingBooks = 0;
      for (final book in authorityBooks) {
        if (books.contains(book)) {
          matchingBooks++;
        }
      }
      
      if (authorityBooks.isNotEmpty) {
        score = matchingBooks / authorityBooks.length;
      }
    }
    
    // Bonus pour les presets qui respectent l'int√©grit√© biblique
    if (preset.name.toLowerCase().contains('chronologique') ||
        preset.name.toLowerCase().contains('traditionnel')) {
      score = (score + 0.8) / 2; // Moyenne avec bonus
    }
    
    return score.clamp(0.0, 1.0);
  }
  
  /// üïäÔ∏è √âvalue l'alignement avec l'√©vangile de J√©sus-Christ
  static double _evaluateGospelOfJesus(PlanPreset preset) {
    double score = 0.0;
    
    // V√©rifier les livres √©vang√©liques
    final books = preset.books.toLowerCase();
    final gospelBooks = _doctrinalBooks['gospel_jesus']!;
    
    int matchingBooks = 0;
    for (final book in gospelBooks) {
      if (books.contains(book)) {
        matchingBooks++;
      }
    }
    
    if (gospelBooks.isNotEmpty) {
      score = matchingBooks / gospelBooks.length;
    }
    
    // Bonus pour les presets centr√©s sur l'√©vangile
    if (preset.name.toLowerCase().contains('√©vangile') ||
        preset.name.toLowerCase().contains('salut') ||
        preset.name.toLowerCase().contains('gr√¢ce')) {
      score = (score + 1.0) / 2; // Moyenne avec bonus
    }
    
    return score.clamp(0.0, 1.0);
  }
  
  /// üïäÔ∏è √âvalue l'alignement avec le profil utilisateur
  static double _evaluateUserAlignment(PlanPreset preset, Map<String, dynamic> userProfile) {
    double score = 0.0;
    
    // V√©rifier l'alignement avec l'objectif spirituel
    final userGoal = userProfile['goal'] as String? ?? '';
    final presetName = preset.name.toLowerCase();
    
    if (userGoal.isNotEmpty) {
      if (userGoal.contains('Rencontrer J√©sus') && presetName.contains('√©vangiles')) {
        score += 0.3;
      }
      if (userGoal.contains('Voir J√©sus') && presetName.contains('nouveau testament')) {
        score += 0.3;
      }
      if (userGoal.contains('Transform√©') && presetName.contains('romains')) {
        score += 0.3;
      }
      if (userGoal.contains('Intimit√©') && presetName.contains('jean')) {
        score += 0.3;
      }
      if (userGoal.contains('Prier') && presetName.contains('psaumes')) {
        score += 0.3;
      }
      if (userGoal.contains('Voix de Dieu') && presetName.contains('proverbes')) {
        score += 0.3;
      }
    }
    
    // V√©rifier l'alignement avec le niveau spirituel
    final userLevel = userProfile['level'] as String? ?? '';
    final presetDuration = preset.durationDays;
    
    if (userLevel == 'Nouveau converti' && presetDuration <= 30) {
      score += 0.2;
    } else if (userLevel == 'Fid√®le r√©gulier' && presetDuration <= 90) {
      score += 0.2;
    } else if (userLevel == 'Serviteur/leader' && presetDuration >= 60) {
      score += 0.2;
    }
    
    return score.clamp(0.0, 1.0);
  }
  
  /// üïäÔ∏è Enrichit un preset avec les donn√©es bibliques
  static PlanPreset _enrichPresetWithBiblicalData(PlanPreset preset, double biblicalScore) {
    final biblicalData = {
      'biblical_score': biblicalScore,
      'biblical_grade': _getBiblicalGrade(biblicalScore),
      'biblical_reasoning': _generateBiblicalReasoning(preset, biblicalScore),
      'biblical_warnings': _generateBiblicalWarnings(preset, biblicalScore),
      'doctrinal_alignment': {
        'doctrine_christ': _evaluateDoctrineOfChrist(preset),
        'authority_bible': _evaluateBibleAuthority(preset),
        'gospel_jesus': _evaluateGospelOfJesus(preset),
      },
    };
    
    return preset.copyWith(
      parameters: {
        ...preset.parameters ?? {},
        ...biblicalData,
      },
    );
  }
  
  /// üïäÔ∏è D√©termine la note biblique
  static String _getBiblicalGrade(double score) {
    if (score >= 0.9) return 'A+ (Excellent)';
    if (score >= 0.8) return 'A (Tr√®s bon)';
    if (score >= 0.7) return 'B+ (Bon)';
    if (score >= 0.6) return 'B (Satisfaisant)';
    if (score >= 0.5) return 'C (Moyen)';
    return 'D (Insuffisant)';
  }
  
  /// üïäÔ∏è G√©n√®re le raisonnement biblique
  static String _generateBiblicalReasoning(PlanPreset preset, double score) {
    final reasoning = <String>[];
    
    if (score >= 0.8) {
      reasoning.add('‚úÖ Excellent alignement avec la doctrine biblique');
      reasoning.add('‚úÖ Respecte l\'autorit√© de la Parole de Dieu');
      reasoning.add('‚úÖ Centr√© sur l\'√©vangile de J√©sus-Christ');
    } else if (score >= 0.7) {
      reasoning.add('‚úÖ Bon alignement avec les crit√®res bibliques');
      reasoning.add('‚úÖ Respecte les fondements de la foi');
    } else {
      reasoning.add('‚ö†Ô∏è Alignement partiel avec les crit√®res bibliques');
    }
    
    // Ajouter des d√©tails sp√©cifiques
    if (preset.name.toLowerCase().contains('√©vangiles')) {
      reasoning.add('üìñ Focus sur la vie et l\'enseignement de J√©sus');
    }
    if (preset.name.toLowerCase().contains('nouveau testament')) {
      reasoning.add('üìñ Couvre l\'accomplissement des proph√©ties');
    }
    if (preset.name.toLowerCase().contains('psaumes')) {
      reasoning.add('üìñ Enrichit la vie de pri√®re et d\'adoration');
    }
    
    return reasoning.join('\n');
  }
  
  /// üïäÔ∏è G√©n√®re les avertissements bibliques
  static List<String> _generateBiblicalWarnings(PlanPreset preset, double score) {
    final warnings = <String>[];
    
    if (score < 0.7) {
      warnings.add('‚ö†Ô∏è Score biblique insuffisant - v√©rifiez l\'alignement doctrinal');
    }
    
    if (preset.durationDays > 365) {
      warnings.add('‚ö†Ô∏è Dur√©e tr√®s longue - risque de d√©couragement');
    }
    
    if (preset.durationDays < 7) {
      warnings.add('‚ö†Ô∏è Dur√©e tr√®s courte - transformation limit√©e');
    }
    
    return warnings;
  }
  
  /// üïäÔ∏è Obtient les recommandations bibliques pour un preset
  static Map<String, dynamic> getBiblicalRecommendations(PlanPreset preset) {
    final score = preset.parameters?['biblical_score'] as double? ?? 0.0;
    final doctrinalAlignment = preset.parameters?['doctrinal_alignment'] as Map<String, dynamic>? ?? {};
    
    return {
      'overall_score': score,
      'grade': _getBiblicalGrade(score),
      'doctrine_christ_score': doctrinalAlignment['doctrine_christ'] ?? 0.0,
      'authority_bible_score': doctrinalAlignment['authority_bible'] ?? 0.0,
      'gospel_jesus_score': doctrinalAlignment['gospel_jesus'] ?? 0.0,
      'recommendation': _getBiblicalRecommendation(score),
      'scripture_references': _getRelevantScriptures(preset),
    };
  }
  
  /// üïäÔ∏è G√©n√®re la recommandation biblique
  static String _getBiblicalRecommendation(double score) {
    if (score >= 0.9) {
      return 'Excellente recommandation biblique - parfaitement align√© avec la doctrine apostolique';
    } else if (score >= 0.8) {
      return 'Tr√®s bonne recommandation biblique - respecte les fondements de la foi';
    } else if (score >= 0.7) {
      return 'Bonne recommandation biblique - align√© avec les crit√®res fondamentaux';
    } else {
      return 'Recommandation biblique limit√©e - v√©rifiez l\'alignement doctrinal';
    }
  }
  
  /// üïäÔ∏è Obtient les r√©f√©rences bibliques pertinentes
  static List<String> _getRelevantScriptures(PlanPreset preset) {
    final scriptures = <String>[];
    
    if (preset.name.toLowerCase().contains('√©vangiles')) {
      scriptures.addAll([
        '1 Jean 4:1-3 - Doctrine de Christ',
        'Jean 1:1-14 - Incarnation',
        'Philippiens 2:5-11 - Humilit√© de Christ',
      ]);
    }
    
    if (preset.name.toLowerCase().contains('bible') || preset.name.toLowerCase().contains('toute')) {
      scriptures.addAll([
        '2 Timoth√©e 3:16 - Inspiration des √âcritures',
        'Apocalypse 22:18-19 - Int√©grit√© de la Parole',
        'Psaume 119:105 - Lampe √† mes pieds',
      ]);
    }
    
    if (preset.name.toLowerCase().contains('salut') || preset.name.toLowerCase().contains('gr√¢ce')) {
      scriptures.addAll([
        'Galates 1:6-9 - √âvangile de J√©sus-Christ',
        '√âph√©siens 2:8-9 - Salut par gr√¢ce',
        'Romains 3:23-24 - Justification gratuite',
      ]);
    }
    
    return scriptures;
  }
}
