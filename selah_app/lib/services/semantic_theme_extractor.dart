import 'dart:convert';
import 'package:flutter/services.dart';
import 'bsb_topical_service.dart';
import 'bsb_concordance_service.dart';

/// üß† Service d'extraction de th√®mes s√©mantiques depuis la lecture du jour
class SemanticThemeExtractor {
  static const List<String> _commonBiblicalThemes = [
    'amour', 'foi', 'gr√¢ce', 'esp√©rance', 'paix', 'joie', 'sagesse',
    'v√©rit√©', 'vie', 'mort', 'r√©surrection', 'salut', 'pardon',
    'justice', 'mis√©ricorde', 'compassion', 'humilit√©', 'servir',
    'pri√®re', 'adoration', 'saintet√©', 'puret√©', 'ob√©issance',
    'crainte', 'crainte de Dieu', 'repentance', 'conversion',
    'alliance', 'promesse', 'b√©n√©diction', 'mal√©diction',
    'tentation', '√©preuve', 'souffrance', 'consolation',
    'r√©demption', 'r√©conciliation', 'adoption', 'h√©ritage',
    'royaume', 'royaume de Dieu', '√©glise', 'communion',
    'service', 'minist√®re', 'don', 'don spirituel',
    'proph√©tie', 'r√©v√©lation', 'vision', 'r√™ve',
    'ange', 'd√©mon', 'satan', 'tentateur',
    'jugement', 'condamnation', 'ch√¢timent', 'discipline',
    'libert√©', 'esclavage', 'captivit√©', 'd√©livrance',
    'gu√©rison', 'miracle', 'signe', 'prodiges',
    'parole', 'parole de Dieu', '√âcriture', 'loi',
    'commandement', 'pr√©cepte', 'statut', 'ordonnance',
    'c≈ìur', '√¢me', 'esprit', 'corps',
    'p√©ch√©', 'iniquit√©', 'transgression', 'r√©bellion',
    'confession', 'aveu', 'reconnaissance', 't√©moignage',
    '√©vang√©lisation', 'mission', 't√©moin', 'ap√¥tre',
    'pasteur', 'ancien', 'diacre', '√©v√™que',
    'bapt√™me', 'c√®ne', 'sacrement', 'ordonnance',
    'mariage', 'famille', 'enfant', 'parent',
    'richesse', 'pauvret√©', 'g√©n√©rosit√©', 'avarice',
    'travail', 'repos', 'sabbat', 'f√™te',
    'temps', 'saison', 'g√©n√©ration', '√¢ge',
    'fin', 'fin des temps', 'retour', 'av√®nement',
    'nouvelle', 'nouvelle cr√©ation', 'ciel', 'terre nouvelle'
  ];

  /// Extrait les th√®mes principaux d'un passage biblique
  static Future<List<String>> extractThemesFromPassage(String passageText, String passageRef) async {
    try {
      // 1. Analyser le texte pour identifier les mots-cl√©s th√©matiques
      final keywords = _extractKeywordsFromText(passageText);
      
      // 2. Matcher avec les th√®mes bibliques communs
      final matchedThemes = _matchWithBiblicalThemes(keywords);
      
      // 3. Enrichir avec l'analyse BSB
      final bsbThemes = await _getBSBThemesForPassage(passageRef, keywords);
      
      // 4. Combiner et prioriser les th√®mes
      final allThemes = [...matchedThemes, ...bsbThemes];
      final uniqueThemes = allThemes.toSet().toList();
      
      // 5. Trier par pertinence (fr√©quence dans le texte)
      final rankedThemes = _rankThemesByRelevance(uniqueThemes, passageText);
      
      return rankedThemes.take(5).toList(); // Top 5 th√®mes
    } catch (e) {
      print('‚ùå Erreur extraction th√®mes s√©mantiques: $e');
      return ['amour', 'foi', 'gr√¢ce']; // Fallback
    }
  }

  /// Extrait les mots-cl√©s du texte
  static List<String> _extractKeywordsFromText(String text) {
    // Normaliser le texte
    final normalizedText = text
        .toLowerCase()
        .replaceAll(RegExp(r'[^\w\s]'), ' ')
        .replaceAll(RegExp(r'\s+'), ' ')
        .trim();
    
    // Diviser en mots
    final words = normalizedText.split(' ');
    
    // Filtrer les mots significatifs (plus de 3 caract√®res, pas de mots vides)
    final stopWords = {
      'que', 'qui', 'dont', 'o√π', 'le', 'la', 'les', 'un', 'une', 'des',
      'du', 'de', 'et', 'ou', 'mais', 'donc', 'car', 'ni', 'or',
      'ce', 'cette', 'ces', 'son', 'sa', 'ses', 'mon', 'ma', 'mes',
      'ton', 'ta', 'tes', 'notre', 'nos', 'votre', 'vos', 'leur', 'leurs',
      'il', 'elle', 'ils', 'elles', 'nous', 'vous', 'je', 'tu', 'on',
      'est', 'sont', '√©tait', '√©taient', 'sera', 'seront', '√™tre', 'avoir',
      'faire', 'dire', 'aller', 'venir', 'voir', 'savoir', 'pouvoir',
      'vouloir', 'devoir', 'falloir', 'para√Ætre', 'sembler', 'rester',
      'devenir', 'rendre', 'mettre', 'prendre', 'donner', 'tenir',
      'laisser', 'passer', 'sortir', 'entrer', 'monter', 'descendre',
      'ouvrir', 'fermer', 'commencer', 'finir', 'continuer', 'arr√™ter'
    };
    
    return words
        .where((word) => word.length > 3 && !stopWords.contains(word))
        .toList();
  }

  /// Match les mots-cl√©s avec les th√®mes bibliques
  static List<String> _matchWithBiblicalThemes(List<String> keywords) {
    final matchedThemes = <String>[];
    
    for (final keyword in keywords) {
      for (final theme in _commonBiblicalThemes) {
        if (theme.contains(keyword) || keyword.contains(theme)) {
          matchedThemes.add(theme);
        }
      }
    }
    
    return matchedThemes;
  }

  /// Obtient les th√®mes BSB pour un passage
  static Future<List<String>> _getBSBThemesForPassage(String passageRef, List<String> keywords) async {
    try {
      await BSBTopicalService.init();
      
      // Extraire le livre du passage
      final book = _extractBookFromReference(passageRef);
      if (book.isEmpty) return [];
      
      // Rechercher des th√®mes li√©s au livre
      final bookThemes = await BSBTopicalService.searchTheme(book);
      
      // Rechercher des th√®mes li√©s aux mots-cl√©s
      final keywordThemes = <String>[];
      for (final keyword in keywords.take(3)) {
        final themes = await BSBTopicalService.searchTheme(keyword);
        keywordThemes.addAll(themes);
      }
      
      return [...bookThemes, ...keywordThemes];
    } catch (e) {
      print('‚ùå Erreur r√©cup√©ration th√®mes BSB: $e');
      return [];
    }
  }

  /// Extrait le nom du livre d'une r√©f√©rence biblique
  static String _extractBookFromReference(String reference) {
    final parts = reference.split(' ');
    if (parts.isNotEmpty) {
      return parts[0];
    }
    return '';
  }

  /// Classe les th√®mes par pertinence
  static List<String> _rankThemesByRelevance(List<String> themes, String passageText) {
    final themeScores = <String, int>{};
    
    for (final theme in themes) {
      int score = 0;
      final themeWords = theme.split(' ');
      
      for (final word in themeWords) {
        // Compter les occurrences du mot dans le texte
        final regex = RegExp(word.toLowerCase());
        final matches = regex.allMatches(passageText.toLowerCase());
        score += matches.length;
      }
      
      themeScores[theme] = score;
    }
    
    // Trier par score d√©croissant
    final sortedThemes = themeScores.entries.toList()
      ..sort((a, b) => b.value.compareTo(a.value));
    
    return sortedThemes.map((e) => e.key).toList();
  }

  /// Obtient un th√®me principal pour la carte d'√©tude
  static Future<String> getMainThemeForStudy(String passageText, String passageRef) async {
    final themes = await extractThemesFromPassage(passageText, passageRef);
    return themes.isNotEmpty ? themes.first : 'amour';
  }
}
