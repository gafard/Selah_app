import 'dart:convert';
import 'package:flutter/services.dart';
import 'thomson_extended_service.dart';

/// Service Thomson pour l'analyse biblique et l'√©tude des personnages/th√®mes
/// 
/// Int√©gr√© avec ThomsonExtendedService pour les cha√Ænes de r√©f√©rences Thompson
class ThomsonService {
  static Map<String, dynamic>? _thomsonData;
  
  /// Initialise le service Thomson
  static Future<void> init() async {
    if (_thomsonData != null) return;
    
    try {
      // Initialiser les deux services
      final String jsonString = await rootBundle.loadString('assets/data/thomson_analysis.json');
      _thomsonData = json.decode(jsonString);
      
      // Initialiser le service √©tendu Thompson
      await ThomsonExtendedService.init();
      
      print('‚úÖ ThomsonService initialis√© avec ${_thomsonData?.length ?? 0} entr√©es + Thompson √©tendu');
    } catch (e) {
      print('‚ö†Ô∏è Erreur chargement ThomsonService: $e');
      _thomsonData = {};
    }
  }
  
  /// R√©cup√®re les donn√©es d'√©tude pour un verset
  static Future<Map<String, dynamic>> getStudyData(String verseId) async {
    await init();
    
    print('üîç ThomsonService.getStudyData pour: $verseId');
    
    if (_thomsonData == null) {
      print('‚ö†Ô∏è _thomsonData est null');
      return {
        'themes': <String>[],
        'characters': <String>[],
        'context': '',
      };
    }
    
    // Extraire le livre et chapitre du verseId (ex: "Jean.3.16" -> "Jean", 3)
    final parts = verseId.split('.');
    if (parts.length < 2) {
      print('‚ö†Ô∏è VerseId invalide: $verseId');
      return _getDefaultData();
    }
    
    final book = parts[0];
    final chapter = int.tryParse(parts[1]);
    if (chapter == null) {
      print('‚ö†Ô∏è Chapitre invalide: ${parts[1]}');
      return _getDefaultData();
    }
    
    print('üîç Recherche: livre=$book, chapitre=$chapter');
    
    // Chercher dans les donn√©es Thomson
    final bookData = _thomsonData![book];
    if (bookData == null) {
      print('‚ö†Ô∏è Livre non trouv√©: $book');
      print('üîç Livres disponibles: ${_thomsonData!.keys.toList()}');
      
      // Fallback intelligent : utiliser des donn√©es g√©n√©riques
      return _getFallbackDataForBook(book, chapter, 1);
    }
    
    print('‚úÖ Livre trouv√©: $book');
    
    // R√©cup√©rer les th√®mes et personnages pour ce chapitre
    final themes = <String>[];
    final characters = <String>[];
    
    // Parcourir les versets du chapitre
    final chapterData = bookData['chapters']?[chapter.toString()];
    if (chapterData != null) {
      print('‚úÖ Chapitre trouv√©: $chapter');
      print('üîç Versets disponibles: ${chapterData.keys.toList()}');
      
      chapterData.forEach((verseNum, verseData) {
        print('üîç Traitement verset $verseNum: $verseData');
        if (verseData is Map<String, dynamic>) {
          // Ajouter les th√®mes
          final verseThemes = verseData['themes'] as List?;
          if (verseThemes != null) {
            themes.addAll(verseThemes.cast<String>());
            print('üîç Th√®mes ajout√©s: $verseThemes');
          }
          
          // Ajouter les personnages
          final verseCharacters = verseData['characters'] as List?;
          if (verseCharacters != null) {
            characters.addAll(verseCharacters.cast<String>());
            print('üîç Personnages ajout√©s: $verseCharacters');
          }
        }
      });
    } else {
      print('‚ö†Ô∏è Chapitre non trouv√©: $chapter');
    }
    
    // Supprimer les doublons et limiter
    final uniqueThemes = themes.toSet().take(5).toList();
    final uniqueCharacters = characters.toSet().take(5).toList();
    
    print('üîç R√©sultat final - Th√®mes: $uniqueThemes, Personnages: $uniqueCharacters');
    
    return {
      'themes': uniqueThemes,
      'characters': uniqueCharacters,
      'context': _getContextualInfo(book, chapter),
    };
  }
  
  /// R√©cup√®re les th√®mes pour un verset sp√©cifique
  static Future<List<String>> getThemes(String verseId) async {
    final data = await getStudyData(verseId);
    return data['themes'] as List<String>;
  }
  
  /// R√©cup√®re les personnages pour un verset sp√©cifique
  static Future<List<String>> getCharacters(String verseId) async {
    final data = await getStudyData(verseId);
    return data['characters'] as List<String>;
  }
  
  /// R√©cup√®re le contexte pour un livre et chapitre
  static Future<String> getContext(String verseId) async {
    final data = await getStudyData(verseId);
    return data['context'] as String;
  }
  
  /// Donn√©es par d√©faut si aucune donn√©e Thomson n'est trouv√©e
  static Map<String, dynamic> _getDefaultData() {
    return {
      'themes': <String>[],
      'characters': <String>[],
      'context': '',
    };
  }
  
  /// Donn√©es de fallback intelligentes pour les livres sans donn√©es sp√©cifiques
  static Map<String, dynamic> _getFallbackDataForBook(String book, int chapter, int verse) {
    print('üîÑ G√©n√©ration de donn√©es de fallback pour $book $chapter:$verse');
    
    // Th√®mes g√©n√©riques bas√©s sur le type de livre
    final themes = _getGenericThemesForBook(book);
    
    // Personnages g√©n√©riques bas√©s sur le livre
    final characters = _getGenericCharactersForBook(book);
    
    // Contexte g√©n√©rique
    final context = _getGenericContextForBook(book, chapter);
    
    return {
      'themes': themes,
      'characters': characters,
      'context': context,
    };
  }
  
  /// Th√®mes g√©n√©riques bas√©s sur le type de livre
  static List<String> _getGenericThemesForBook(String book) {
    final bookThemes = {
      'Matthieu': ['Royaume de Dieu', 'J√©sus Messie', 'Enseignement', 'Proph√©tie'],
      'Marc': ['Minist√®re de J√©sus', 'Miracles', 'Serviteur', '√âvangile'],
      'Luc': ['Salut universel', 'Gr√¢ce', 'Pri√®re', 'Esprit Saint'],
      'Jean': ['Vie √©ternelle', 'Amour de Dieu', 'V√©rit√©', 'R√©v√©lation'],
      'Actes': ['√âglise primitive', 'Esprit Saint', 'Mission', 'T√©moignage'],
      'Romains': ['Justification', 'Gr√¢ce', 'Foi', 'Salut'],
      '1 Corinthiens': ['√âglise', 'Amour', 'R√©surrection', 'Dons spirituels'],
      '2 Corinthiens': ['Minist√®re', 'Souffrance', 'Gloire', 'R√©conciliation'],
      'Galates': ['Libert√©', 'Foi', 'Esprit', 'Loi vs Gr√¢ce'],
      '√âph√©siens': ['√âglise', 'Unit√©', 'Amour', 'Armure de Dieu'],
      'Philippiens': ['Joie', 'Christ', 'Humilit√©', 'Contentement'],
      'Colossiens': ['Pr√©√©minence de Christ', 'Sagesse', 'Pri√®re', 'Vie nouvelle'],
      '1 Thessaloniciens': ['Esp√©rance', 'Retour de Christ', 'Saintet√©', '√âdification'],
      '2 Thessaloniciens': ['Retour de Christ', 'Pers√©v√©rance', 'Travail', 'Ordre'],
      '1 Timoth√©e': ['Minist√®re', 'Doctrine', 'Conduite', '√âglise'],
      '2 Timoth√©e': ['Fid√©lit√©', 'Souffrance', '√âvangile', 'H√©ritage'],
      'Tite': ['Bonnes ≈ìuvres', 'Doctrine', 'Conduite', 'Gr√¢ce'],
      'Phil√©mon': ['Gr√¢ce', 'R√©conciliation', 'Amour', 'Fraternit√©'],
      'H√©breux': ['Christ sup√©rieur', 'Foi', 'Pers√©v√©rance', 'Nouvelle alliance'],
      'Jacques': ['Foi et ≈ìuvres', 'Sagesse', '√âpreuves', 'Pri√®re'],
      '1 Pierre': ['Souffrance', 'Esp√©rance', 'Sainte conduite', 'Gr√¢ce'],
      '2 Pierre': ['Connaissance', 'Virtue', 'Croissance', 'Proph√©tie'],
      '1 Jean': ['Amour', 'Vie √©ternelle', 'V√©rit√©', 'Communion'],
      '2 Jean': ['V√©rit√©', 'Amour', 'Marche', 'Doctrine'],
      '3 Jean': ['Hospitalit√©', 'V√©rit√©', 'Bien-√™tre', 'T√©moignage'],
      'Jude': ['Foi', 'Mis√©ricorde', 'Jugement', 'Pr√©servation'],
      'Apocalypse': ['R√©v√©lation', 'Jugement', 'Esp√©rance', 'Victoire'],
    };
    
    return bookThemes[book] ?? ['√âtude biblique', 'Parole de Dieu', 'Foi', 'Esp√©rance'];
  }
  
  /// Personnages g√©n√©riques bas√©s sur le livre
  static List<String> _getGenericCharactersForBook(String book) {
    final bookCharacters = {
      'Matthieu': ['J√©sus', 'Marie', 'Joseph', 'Pierre', 'Jean'],
      'Marc': ['J√©sus', 'Pierre', 'Jean', 'Jacques', 'Marie'],
      'Luc': ['J√©sus', 'Marie', 'Pierre', 'Paul', 'Jean'],
      'Jean': ['J√©sus', 'Pierre', 'Jean', 'Marie', 'Thomas'],
      'Actes': ['Pierre', 'Paul', 'Jean', 'Barnabas', '√âtienne'],
      'Romains': ['Paul', 'Pierre', 'Timoth√©e', 'Priscille', 'Aquilas'],
      '1 Corinthiens': ['Paul', 'Pierre', 'Apollos', 'Timoth√©e', '√âtienne'],
      '2 Corinthiens': ['Paul', 'Timoth√©e', 'Tite', 'Barnabas', 'Pierre'],
      'Galates': ['Paul', 'Pierre', 'Barnabas', 'Tite', 'Timoth√©e'],
      '√âph√©siens': ['Paul', 'Tychique', 'Timoth√©e', 'Pierre', 'Jean'],
      'Philippiens': ['Paul', 'Timoth√©e', '√âpaphrodite', 'Pierre', 'Jean'],
      'Colossiens': ['Paul', 'Tychique', 'On√©sime', 'Timoth√©e', 'Pierre'],
      '1 Thessaloniciens': ['Paul', 'Silvain', 'Timoth√©e', 'Pierre', 'Jean'],
      '2 Thessaloniciens': ['Paul', 'Silvain', 'Timoth√©e', 'Pierre', 'Jean'],
      '1 Timoth√©e': ['Paul', 'Timoth√©e', 'Pierre', 'Jean', 'Barnabas'],
      '2 Timoth√©e': ['Paul', 'Timoth√©e', 'Pierre', 'Jean', 'On√©siphore'],
      'Tite': ['Paul', 'Tite', 'Pierre', 'Jean', 'Timoth√©e'],
      'Phil√©mon': ['Paul', 'Phil√©mon', 'On√©sime', 'Tite', 'Timoth√©e'],
      'H√©breux': ['Paul', 'Pierre', 'Jean', 'Timoth√©e', 'Barnabas'],
      'Jacques': ['Jacques', 'J√©sus', 'Pierre', 'Jean', 'Paul'],
      '1 Pierre': ['Pierre', 'Paul', 'Jean', 'Marie', 'J√©sus'],
      '2 Pierre': ['Pierre', 'Paul', 'Jean', 'J√©sus', 'Marie'],
      '1 Jean': ['Jean', 'J√©sus', 'Pierre', 'Paul', 'Marie'],
      '2 Jean': ['Jean', 'J√©sus', 'Pierre', 'Paul', 'Marie'],
      '3 Jean': ['Jean', 'Ga√Øus', 'D√©m√©trius', 'Pierre', 'Paul'],
      'Jude': ['Jude', 'J√©sus', 'Pierre', 'Jean', 'Paul'],
      'Apocalypse': ['Jean', 'J√©sus', 'Pierre', 'Paul', 'Marie'],
    };
    
    return bookCharacters[book] ?? ['Auteur biblique', 'Personnages bibliques'];
  }
  
  /// Contexte g√©n√©rique bas√© sur le livre et chapitre
  static String _getGenericContextForBook(String book, int chapter) {
    final contexts = {
      'Matthieu': '√âvangile de Matthieu - J√©sus comme Roi et Messie promis',
      'Marc': '√âvangile de Marc - J√©sus comme Serviteur souffrant',
      'Luc': '√âvangile de Luc - J√©sus comme Fils de l\'homme parfait',
      'Jean': '√âvangile de Jean - J√©sus comme Fils de Dieu √©ternel',
      'Actes': 'Livre des Actes - Histoire de l\'√âglise primitive et de l\'expansion de l\'√âvangile',
      'Romains': '√âp√Ætre aux Romains - Doctrine de la justification par la foi seule',
      '1 Corinthiens': '1 Corinthiens - Instructions pour l\'√âglise de Corinthe',
      '2 Corinthiens': '2 Corinthiens - Minist√®re de Paul et d√©fense de son apostolat',
      'Galates': '√âp√Ætre aux Galates - Libert√© en Christ contre le l√©galisme',
      '√âph√©siens': '√âp√Ætre aux √âph√©siens - L\'√âglise comme corps de Christ',
      'Philippiens': '√âp√Ætre aux Philippiens - La joie en Christ malgr√© les √©preuves',
      'Colossiens': '√âp√Ætre aux Colossiens - La pr√©√©minence de Christ',
      '1 Thessaloniciens': '1 Thessaloniciens - L\'esp√©rance du retour de Christ',
      '2 Thessaloniciens': '2 Thessaloniciens - Instructions sur le retour de Christ',
      '1 Timoth√©e': '1 Timoth√©e - Instructions pour le minist√®re pastoral',
      '2 Timoth√©e': '2 Timoth√©e - Exhortation √† la fid√©lit√© dans le minist√®re',
      'Tite': '√âp√Ætre √† Tite - Instructions pour l\'organisation de l\'√âglise',
      'Phil√©mon': '√âp√Ætre √† Phil√©mon - Exemple de r√©conciliation chr√©tienne',
      'H√©breux': '√âp√Ætre aux H√©breux - Christ sup√©rieur √† l\'ancienne alliance',
      'Jacques': '√âp√Ætre de Jacques - La foi qui produit des ≈ìuvres',
      '1 Pierre': '1 Pierre - Exhortation √† la saintet√© dans la souffrance',
      '2 Pierre': '2 Pierre - Croissance dans la gr√¢ce et la connaissance',
      '1 Jean': '1 Jean - L\'amour de Dieu et la vie √©ternelle',
      '2 Jean': '2 Jean - Marcher dans la v√©rit√© et l\'amour',
      '3 Jean': '3 Jean - L\'hospitalit√© et le soutien des missionnaires',
      'Jude': '√âp√Ætre de Jude - Contre les faux enseignants',
      'Apocalypse': 'Apocalypse - R√©v√©lation de J√©sus-Christ et de la fin des temps',
    };
    
    return contexts[book] ?? 'Livre biblique - Parole de Dieu inspir√©e';
  }
  
  /// G√©n√®re des informations contextuelles basiques
  static String _getContextualInfo(String book, int chapter) {
    final contextMap = {
      'Jean': '√âvangile de Jean - R√©v√©lation de J√©sus comme Fils de Dieu',
      'Matthieu': '√âvangile de Matthieu - J√©sus comme Roi et Messie',
      'Marc': '√âvangile de Marc - J√©sus comme Serviteur',
      'Luc': '√âvangile de Luc - J√©sus comme Fils de l\'homme',
      'Actes': 'Livre des Actes - Histoire de l\'√âglise primitive',
      'Romains': '√âp√Ætre aux Romains - Doctrine de la justification par la foi',
      '1 Corinthiens': '1 Corinthiens - Instructions pour l\'√âglise de Corinthe',
      '2 Corinthiens': '2 Corinthiens - Minist√®re de Paul et d√©fense de son apostolat',
      'Galates': '√âp√Ætre aux Galates - Libert√© en Christ vs l√©galisme',
      '√âph√©siens': '√âp√Ætre aux √âph√©siens - L\'√âglise comme corps de Christ',
      'Philippiens': '√âp√Ætre aux Philippiens - Joie en Christ malgr√© les √©preuves',
      'Colossiens': '√âp√Ætre aux Colossiens - Sup√©riorit√© de Christ',
      '1 Thessaloniciens': '1 Thessaloniciens - Esp√©rance du retour de Christ',
      '2 Thessaloniciens': '2 Thessaloniciens - Enseignements sur les derniers temps',
      '1 Timoth√©e': '1 Timoth√©e - Instructions pour le minist√®re pastoral',
      '2 Timoth√©e': '2 Timoth√©e - Derni√®res exhortations de Paul',
      'Tite': '√âp√Ætre √† Tite - Organisation de l\'√âglise en Cr√®te',
      'Phil√©mon': '√âp√Ætre √† Phil√©mon - R√©conciliation et pardon',
      'H√©breux': '√âp√Ætre aux H√©breux - Sup√©riorit√© de Christ sur l\'Ancienne Alliance',
      'Jacques': '√âp√Ætre de Jacques - Foi et ≈ìuvres',
      '1 Pierre': '1 Pierre - Souffrance et esp√©rance chr√©tienne',
      '2 Pierre': '2 Pierre - Croissance spirituelle et vigilance',
      '1 Jean': '1 Jean - Amour de Dieu et communion fraternelle',
      '2 Jean': '2 Jean - Marche dans la v√©rit√©',
      '3 Jean': '3 Jean - Hospitalit√© et v√©rit√©',
      'Jude': '√âp√Ætre de Jude - Contre les faux enseignants',
      'Apocalypse': 'Apocalypse - R√©v√©lation de J√©sus-Christ et des temps de la fin',
    };
    
    return contextMap[book] ?? 'Contexte biblique g√©n√©ral';
  }
  
  /// V√©rifie si le service est initialis√©
  static bool get isInitialized => _thomsonData != null;
  
  /// Obtient le nombre d'entr√©es charg√©es
  static int get entryCount => _thomsonData?.length ?? 0;
  
  /// R√©cup√®re les cha√Ænes de r√©f√©rences Thompson pour un passage
  /// 
  /// [reference] : R√©f√©rence biblique compl√®te (ex: "1 Pierre 1:1-2:25")
  /// 
  /// Retourne : Liste des r√©f√©rences li√©es selon Thompson
  static Future<List<String>> getThompsonChains(String reference) async {
    await init();
    return await ThomsonExtendedService.getThompsonChains(reference);
  }
  
  /// R√©cup√®re les th√®mes Thompson enrichis pour un passage
  /// 
  /// [reference] : R√©f√©rence biblique compl√®te
  /// 
  /// Retourne : Liste des th√®mes Thompson
  static Future<List<String>> getThompsonThemes(String reference) async {
    await init();
    return await ThomsonExtendedService.getThompsonThemes(reference);
  }
  
  /// R√©cup√®re les notices arch√©ologiques pour un passage
  /// 
  /// [reference] : R√©f√©rence biblique compl√®te
  /// 
  /// Retourne : Liste des notices arch√©ologiques
  static Future<List<String>> getArchaeologicalNotices(String reference) async {
    await init();
    return await ThomsonExtendedService.getArchaeologicalNotices(reference);
  }
  
  /// R√©cup√®re les portraits de personnages pour un passage
  /// 
  /// [reference] : R√©f√©rence biblique compl√®te
  /// 
  /// Retourne : Liste des portraits de personnages
  static Future<List<String>> getCharacterPortraits(String reference) async {
    await init();
    return await ThomsonExtendedService.getCharacterPortraits(reference);
  }
  
  /// R√©cup√®re toutes les donn√©es Thompson √©tendues pour un passage
  /// 
  /// [reference] : R√©f√©rence biblique compl√®te
  /// 
  /// Retourne : Toutes les donn√©es Thompson disponibles
  static Future<Map<String, dynamic>> getCompleteThompsonData(String reference) async {
    await init();
    return await ThomsonExtendedService.getCompleteThompsonData(reference);
  }
  
  /// Recherche avanc√©e dans l'index Thompson
  /// 
  /// [query] : Terme de recherche
  /// 
  /// Retourne : R√©sultats de recherche avec contexte
  static Future<List<Map<String, dynamic>>> searchThompsonIndex(String query) async {
    await init();
    return await ThomsonExtendedService.searchThompsonIndex(query);
  }
}
