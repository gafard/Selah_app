import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:flutter/foundation.dart';
import 'package:hive/hive.dart';
import 'sync_queue_hive.dart';
import 'plan_service_http.dart';
import 'user_prefs_hive.dart';
import 'telemetry_console.dart';
import 'user_repo_supabase.dart';

/// üß† PROPH√àTE - Service de connectivit√© avec smart sync
/// 
/// Niveau : Proph√®te (Intelligent) - Service intelligent pour la connectivit√© adaptative
/// 
/// Priorit√©s d'interaction :
/// üî• Priorit√© 1: sync_queue_hive.dart (synchronisation intelligente)
/// üî• Priorit√© 2: plan_service_http.dart (plans offline-first)
/// üî• Priorit√© 3: user_prefs_hive.dart (pr√©f√©rences utilisateur)
/// üéØ Thompson: Enrichit les recommandations avec th√®mes spirituels
class ConnectivityService extends ChangeNotifier {
  static final ConnectivityService _instance = ConnectivityService._internal();
  factory ConnectivityService() => _instance;
  static ConnectivityService get instance => _instance;
  ConnectivityService._internal();

  final Connectivity _connectivity = Connectivity();
  bool _isOnline = true;
  List<ConnectivityResult> _connectionStatus = [ConnectivityResult.none];
  Box? _syncStatsBox;
  DateTime? _lastSyncTime;
  int _syncAttempts = 0;
  int _successfulSyncs = 0;

  bool get isOnline => _isOnline;
  List<ConnectivityResult> get connectionStatus => _connectionStatus;
  DateTime? get lastSyncTime => _lastSyncTime;
  int get syncAttempts => _syncAttempts;
  int get successfulSyncs => _successfulSyncs;
  double get _syncSuccessRate => _syncAttempts > 0 ? _successfulSyncs / _syncAttempts : 0.0;
  double get syncSuccessRate => _syncAttempts > 0 ? _successfulSyncs / _syncAttempts : 0.0;
  
  /// Stream des changements de connectivit√© (online/offline)
  Stream<bool> get onConnectivityChanged => _connectivity.onConnectivityChanged.map((result) {
    return result != [ConnectivityResult.none] && result.isNotEmpty;
  });

  /// üß† Initialise le service intelligent et √©coute les changements de connectivit√©
  Future<void> init() async {
    // Initialiser la box Hive pour les statistiques de sync
    _syncStatsBox = await Hive.openBox('sync_stats');
    await _loadSyncStats();
    
    // V√©rifier l'√©tat initial
    _connectionStatus = await _connectivity.checkConnectivity();
    _isOnline = _connectionStatus != [ConnectivityResult.none] && _connectionStatus.isNotEmpty;
    
    // √âcouter les changements
    _connectivity.onConnectivityChanged.listen(_updateConnectionStatus);
    
    // üß† INTELLIGENCE CONTEXTUELLE - D√©marrer la smart sync si en ligne
    if (_isOnline) {
      await _startSmartSync();
    }
    
    notifyListeners();
    print('üèéÔ∏è Proph√®te Intelligent: Service de connectivit√© initialis√© avec smart sync');
  }

  /// üß† Charge les statistiques de synchronisation
  Future<void> _loadSyncStats() async {
    try {
      _syncAttempts = _syncStatsBox?.get('sync_attempts', defaultValue: 0) ?? 0;
      _successfulSyncs = _syncStatsBox?.get('successful_syncs', defaultValue: 0) ?? 0;
      final lastSyncString = _syncStatsBox?.get('last_sync_time');
      if (lastSyncString != null) {
        _lastSyncTime = DateTime.parse(lastSyncString);
      }
    } catch (e) {
      print('‚ö†Ô∏è Erreur chargement stats sync: $e');
    }
  }

  /// üß† Sauvegarde les statistiques de synchronisation
  Future<void> _saveSyncStats() async {
    try {
      await _syncStatsBox?.put('sync_attempts', _syncAttempts);
      await _syncStatsBox?.put('successful_syncs', _successfulSyncs);
      if (_lastSyncTime != null) {
        await _syncStatsBox?.put('last_sync_time', _lastSyncTime!.toIso8601String());
      }
    } catch (e) {
      print('‚ö†Ô∏è Erreur sauvegarde stats sync: $e');
    }
  }

  /// üß† Met √† jour l'√©tat de connectivit√© avec smart sync
  void _updateConnectionStatus(List<ConnectivityResult> result) {
    _connectionStatus = result;
    final wasOnline = _isOnline;
    _isOnline = result != [ConnectivityResult.none] && result.isNotEmpty;
    
    if (wasOnline != _isOnline) {
      notifyListeners();
      
      // üß† INTELLIGENCE CONTEXTUELLE - Smart sync automatique
      if (_isOnline && !wasOnline) {
        // Passage de offline √† online ‚Üí d√©marrer smart sync
        _startSmartSync();
      } else if (!_isOnline && wasOnline) {
        // Passage de online √† offline ‚Üí arr√™ter sync
        _stopSmartSync();
      }
      
      // Log du changement
      if (kDebugMode) {
        print('üåê Connectivit√© chang√©e: ${_isOnline ? "EN LIGNE" : "HORS LIGNE"}');
        print('   Types: ${result.join(", ")}');
        if (_isOnline) {
          print('üèéÔ∏è Proph√®te Intelligent: Smart sync d√©marr√©e automatiquement');
        }
      }
    }
  }

  /// üß† D√©marre la smart sync intelligente
  Future<void> _startSmartSync() async {
    try {
      // üî• PRIORIT√â 1: V√©rifier la queue de synchronisation
      final syncQueue = SyncQueueHive(
        Hive.box('sync_tasks'),
        telemetry: TelemetryConsole(),
        userRepo: UserRepoSupabase(),
      );
      final pendingTasks = await syncQueue.getPendingTasks();
      
      if (pendingTasks.isNotEmpty) {
        print('üèéÔ∏è Proph√®te Intelligent: ${pendingTasks.length} t√¢ches en attente de sync');
        
        // üî• PRIORIT√â 2: Synchroniser selon la priorit√©
        await _syncWithPriority(pendingTasks);
      }
      
      // üî• PRIORIT√â 3: Synchroniser les pr√©f√©rences utilisateur
      await _syncUserPreferences();
      
    } catch (e) {
      print('‚ö†Ô∏è Erreur smart sync: $e');
    }
  }

  /// üß† Arr√™te la smart sync
  void _stopSmartSync() {
    print('üèéÔ∏è Proph√®te Intelligent: Smart sync arr√™t√©e (hors ligne)');
  }

  /// üß† Synchronise avec priorit√© intelligente
  Future<void> _syncWithPriority(List<Map<String, dynamic>> tasks) async {
    _syncAttempts++;
    
    try {
      // Trier par priorit√© (plans > pr√©f√©rences > autres)
      tasks.sort((a, b) {
        final priorityA = _getTaskPriority(a);
        final priorityB = _getTaskPriority(b);
        return priorityB.compareTo(priorityA);
      });
      
      int successCount = 0;
      for (final task in tasks) {
        try {
          await _syncTask(task);
          successCount++;
        } catch (e) {
          print('‚ö†Ô∏è Erreur sync t√¢che ${task['kind']}: $e');
        }
      }
      
      if (successCount > 0) {
        _successfulSyncs++;
        _lastSyncTime = DateTime.now();
        await _saveSyncStats();
        print('üèéÔ∏è Proph√®te Intelligent: $successCount t√¢ches synchronis√©es avec succ√®s');
      }
      
    } catch (e) {
      print('‚ö†Ô∏è Erreur sync avec priorit√©: $e');
    }
  }

  /// üß† D√©termine la priorit√© d'une t√¢che
  int _getTaskPriority(Map<String, dynamic> task) {
    final kind = task['kind'] as String?;
    switch (kind) {
      case 'plan_create':
      case 'plan_patch':
        return 3; // Priorit√© haute
      case 'user_patch':
        return 2; // Priorit√© moyenne
      default:
        return 1; // Priorit√© basse
    }
  }

  /// üß† Synchronise une t√¢che sp√©cifique
  Future<void> _syncTask(Map<String, dynamic> task) async {
    // TODO: Impl√©menter la synchronisation r√©elle avec le serveur
    // Pour l'instant, on simule le succ√®s
    await Future.delayed(const Duration(milliseconds: 100));
  }

  /// üß† Synchronise les pr√©f√©rences utilisateur
  Future<void> _syncUserPreferences() async {
    try {
      // TODO: Int√©grer avec user_prefs_hive pour synchroniser les pr√©f√©rences
      print('üèéÔ∏è Proph√®te Intelligent: Pr√©f√©rences utilisateur synchronis√©es');
    } catch (e) {
      print('‚ö†Ô∏è Erreur sync pr√©f√©rences: $e');
    }
  }

  /// V√©rifie si une fonctionnalit√© n√©cessite Internet
  bool requiresInternet(String feature) {
    const onlineFeatures = {
      'create_account': true,
      'sign_in': true,
      'download_bible': true,
      'generate_plan': true,
      'import_plan': true,
      'sync_data': true,
    };
    
    return onlineFeatures[feature] ?? false;
  }

  /// V√©rifie si une fonctionnalit√© est disponible
  bool isFeatureAvailable(String feature) {
    if (!requiresInternet(feature)) {
      return true; // Toujours disponible offline
    }
    
    return _isOnline; // N√©cessite Internet
  }

  /// Retourne un message d'erreur appropri√© pour une fonctionnalit√©
  String getFeatureErrorMessage(String feature) {
    if (!requiresInternet(feature)) {
      return 'Fonctionnalit√© disponible offline';
    }
    
    if (_isOnline) {
      return 'Fonctionnalit√© disponible';
    }
    
    return 'Connexion Internet requise pour $feature';
  }

  /// Retourne les fonctionnalit√©s disponibles selon la connectivit√©
  Map<String, bool> getAvailableFeatures() {
    return {
      'read_bible': true, // Toujours disponible (stockage local)
      'view_plans': true, // Toujours disponible (stockage local)
      'track_progress': true, // Toujours disponible (stockage local)
      'take_quiz': true, // Toujours disponible (stockage local)
      'view_stats': true, // Toujours disponible (stockage local)
      'create_account': _isOnline,
      'sign_in': _isOnline,
      'download_bible': _isOnline,
      'generate_plan': _isOnline,
      'import_plan': _isOnline,
      'sync_data': _isOnline,
    };
  }

  /// Retourne le type de connexion actuel
  String getConnectionType() {
    if (!_isOnline) return 'Aucune connexion';
    
    if (_connectionStatus.contains(ConnectivityResult.wifi)) {
      return 'WiFi';
    } else if (_connectionStatus.contains(ConnectivityResult.mobile)) {
      return 'Donn√©es mobiles';
    } else if (_connectionStatus.contains(ConnectivityResult.ethernet)) {
      return 'Ethernet';
    } else {
      return 'Autre';
    }
  }

  /// Retourne la qualit√© de connexion estim√©e
  String getConnectionQuality() {
    if (!_isOnline) return 'Aucune';
    
    if (_connectionStatus.contains(ConnectivityResult.wifi)) {
      return 'Excellente';
    } else if (_connectionStatus.contains(ConnectivityResult.mobile)) {
      return 'Variable';
    } else {
      return 'Inconnue';
    }
  }

  /// V√©rifie si la connexion est stable (pour les op√©rations longues)
  bool get isConnectionStable {
    if (!_isOnline) return false;
    
    // WiFi est consid√©r√© comme stable
    return _connectionStatus.contains(ConnectivityResult.wifi);
  }

  /// üß† Retourne des recommandations intelligentes selon l'√©tat de connectivit√©
  List<String> getRecommendations() {
    final recommendations = <String>[];
    
    if (!_isOnline) {
      recommendations.addAll([
        'Vous √™tes hors ligne. Toutes les fonctionnalit√©s de lecture sont disponibles.',
        'La synchronisation se fera automatiquement quand vous serez en ligne.',
        'Vous pouvez t√©l√©charger des versions de Bible quand vous aurez Internet.',
      ]);
    } else if (!isConnectionStable) {
      recommendations.addAll([
        'Connexion mobile d√©tect√©e. Les t√©l√©chargements peuvent √™tre lents.',
        'Connectez-vous au WiFi pour une meilleure exp√©rience.',
        'Toutes les fonctionnalit√©s sont disponibles.',
      ]);
    } else {
      recommendations.addAll([
        'Connexion WiFi excellente. Toutes les fonctionnalit√©s sont disponibles.',
        'Vous pouvez t√©l√©charger de nouvelles versions de Bible.',
        'La synchronisation se fait automatiquement.',
      ]);
    }
    
    return recommendations;
  }

  /// üß† Retourne des recommandations intelligentes avec Thompson
  List<String> getIntelligentRecommendations() {
    final recommendations = <String>[];
    
    if (!_isOnline) {
      recommendations.addAll([
        'üåø Mode hors ligne activ√© ‚Äî Votre parcours spirituel continue',
        'üìñ Toutes vos lectures et m√©ditations sont disponibles localement',
        'üîÑ La synchronisation se fera automatiquement quand vous serez en ligne',
        'üí´ "Ne vous inqui√©tez pas" ‚Äî Votre connexion avec Dieu ne d√©pend pas d\'Internet',
      ]);
    } else if (!isConnectionStable) {
      recommendations.addAll([
        'üì± Connexion mobile d√©tect√©e ‚Äî Prudence pour les t√©l√©chargements',
        'üè† Connectez-vous au WiFi pour une exp√©rience optimale',
        '‚è∞ Toutes les fonctionnalit√©s sont disponibles, mais plus lentement',
        'üôè "Tenir ferme" ‚Äî Votre foi ne d√©pend pas de la vitesse de connexion',
      ]);
    } else {
      recommendations.addAll([
        'üöÄ Connexion WiFi excellente ‚Äî Exp√©rience optimale disponible',
        'üìö Vous pouvez t√©l√©charger de nouvelles versions de Bible',
        'üîÑ La synchronisation intelligente se fait automatiquement',
        '‚ú® "De la force en force" ‚Äî Votre croissance spirituelle est soutenue',
      ]);
    }
    
    // Ajouter des recommandations bas√©es sur les statistiques de sync
    if (_syncSuccessRate > 0.8) {
      recommendations.add('üìä Excellente fiabilit√© de synchronisation (${(_syncSuccessRate * 100).round()}%)');
    } else if (_syncSuccessRate > 0.5) {
      recommendations.add('üìä Synchronisation correcte (${(_syncSuccessRate * 100).round()}%)');
    } else if (_syncAttempts > 0) {
      recommendations.add('‚ö†Ô∏è Synchronisation parfois difficile (${(_syncSuccessRate * 100).round()}%)');
    }
    
    return recommendations;
  }

  /// üß† Force une synchronisation intelligente
  Future<bool> forceSmartSync() async {
    if (!_isOnline) {
      print('‚ö†Ô∏è Impossible de synchroniser hors ligne');
      return false;
    }
    
    try {
      await _startSmartSync();
      return true;
    } catch (e) {
      print('‚ö†Ô∏è Erreur sync forc√©e: $e');
      return false;
    }
  }

  /// üß† Retourne les statistiques de synchronisation
  Map<String, dynamic> getSyncStats() {
    return {
      'attempts': _syncAttempts,
      'successful': _successfulSyncs,
      'successRate': syncSuccessRate,
      'lastSync': _lastSyncTime?.toIso8601String(),
      'isOnline': _isOnline,
      'connectionType': getConnectionType(),
      'connectionQuality': getConnectionQuality(),
    };
  }

  /// üß† Pr√©dit la qualit√© de synchronisation
  String predictSyncQuality() {
    if (!_isOnline) return 'Impossible';
    
    if (isConnectionStable && syncSuccessRate > 0.8) {
      return 'Excellente';
    } else if (isConnectionStable && syncSuccessRate > 0.5) {
      return 'Bonne';
    } else if (isConnectionStable) {
      return 'Correcte';
    } else {
      return 'Variable';
    }
  }
}