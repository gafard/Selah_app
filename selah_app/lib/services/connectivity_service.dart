import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:flutter/foundation.dart';

/// Service de gestion de la connectivit√© et des fonctionnalit√©s online/offline
class ConnectivityService extends ChangeNotifier {
  static final ConnectivityService _instance = ConnectivityService._internal();
  factory ConnectivityService() => _instance;
  ConnectivityService._internal();

  final Connectivity _connectivity = Connectivity();
  bool _isOnline = true;
  List<ConnectivityResult> _connectionStatus = [ConnectivityResult.none];

  bool get isOnline => _isOnline;
  List<ConnectivityResult> get connectionStatus => _connectionStatus;

  /// Initialise le service et √©coute les changements de connectivit√©
  Future<void> init() async {
    // V√©rifier l'√©tat initial
    _connectionStatus = await _connectivity.checkConnectivity();
    _isOnline = _connectionStatus != [ConnectivityResult.none];
    
    // √âcouter les changements
    _connectivity.onConnectivityChanged.listen(_updateConnectionStatus);
    
    notifyListeners();
  }

  /// Met √† jour l'√©tat de connectivit√©
  void _updateConnectionStatus(List<ConnectivityResult> result) {
    _connectionStatus = result;
    final wasOnline = _isOnline;
    _isOnline = result != [ConnectivityResult.none];
    
    if (wasOnline != _isOnline) {
      notifyListeners();
      
      // Log du changement
      if (kDebugMode) {
        print('üåê Connectivit√© chang√©e: ${_isOnline ? "EN LIGNE" : "HORS LIGNE"}');
        print('   Types: ${result.join(", ")}');
      }
    }
  }

  /// V√©rifie si une fonctionnalit√© n√©cessite Internet
  bool requiresInternet(String feature) {
    const onlineFeatures = {
      'create_account': true,
      'sign_in': true,
      'download_bible': true,
      'generate_plan': true,
      'import_plan': true,
      'sync_data': true,
    };
    
    return onlineFeatures[feature] ?? false;
  }

  /// V√©rifie si une fonctionnalit√© est disponible
  bool isFeatureAvailable(String feature) {
    if (!requiresInternet(feature)) {
      return true; // Toujours disponible offline
    }
    
    return _isOnline; // N√©cessite Internet
  }

  /// Retourne un message d'erreur appropri√© pour une fonctionnalit√©
  String getFeatureErrorMessage(String feature) {
    if (!requiresInternet(feature)) {
      return 'Fonctionnalit√© disponible offline';
    }
    
    if (_isOnline) {
      return 'Fonctionnalit√© disponible';
    }
    
    return 'Connexion Internet requise pour $feature';
  }

  /// Retourne les fonctionnalit√©s disponibles selon la connectivit√©
  Map<String, bool> getAvailableFeatures() {
    return {
      'read_bible': true, // Toujours disponible (stockage local)
      'view_plans': true, // Toujours disponible (stockage local)
      'track_progress': true, // Toujours disponible (stockage local)
      'take_quiz': true, // Toujours disponible (stockage local)
      'view_stats': true, // Toujours disponible (stockage local)
      'create_account': _isOnline,
      'sign_in': _isOnline,
      'download_bible': _isOnline,
      'generate_plan': _isOnline,
      'import_plan': _isOnline,
      'sync_data': _isOnline,
    };
  }

  /// Retourne le type de connexion actuel
  String getConnectionType() {
    if (!_isOnline) return 'Aucune connexion';
    
    if (_connectionStatus.contains(ConnectivityResult.wifi)) {
      return 'WiFi';
    } else if (_connectionStatus.contains(ConnectivityResult.mobile)) {
      return 'Donn√©es mobiles';
    } else if (_connectionStatus.contains(ConnectivityResult.ethernet)) {
      return 'Ethernet';
    } else {
      return 'Autre';
    }
  }

  /// Retourne la qualit√© de connexion estim√©e
  String getConnectionQuality() {
    if (!_isOnline) return 'Aucune';
    
    if (_connectionStatus.contains(ConnectivityResult.wifi)) {
      return 'Excellente';
    } else if (_connectionStatus.contains(ConnectivityResult.mobile)) {
      return 'Variable';
    } else {
      return 'Inconnue';
    }
  }

  /// V√©rifie si la connexion est stable (pour les op√©rations longues)
  bool get isConnectionStable {
    if (!_isOnline) return false;
    
    // WiFi est consid√©r√© comme stable
    return _connectionStatus.contains(ConnectivityResult.wifi);
  }

  /// Retourne des recommandations selon l'√©tat de connectivit√©
  List<String> getRecommendations() {
    final recommendations = <String>[];
    
    if (!_isOnline) {
      recommendations.addAll([
        'Vous √™tes hors ligne. Toutes les fonctionnalit√©s de lecture sont disponibles.',
        'La synchronisation se fera automatiquement quand vous serez en ligne.',
        'Vous pouvez t√©l√©charger des versions de Bible quand vous aurez Internet.',
      ]);
    } else if (!isConnectionStable) {
      recommendations.addAll([
        'Connexion mobile d√©tect√©e. Les t√©l√©chargements peuvent √™tre lents.',
        'Connectez-vous au WiFi pour une meilleure exp√©rience.',
        'Toutes les fonctionnalit√©s sont disponibles.',
      ]);
    } else {
      recommendations.addAll([
        'Connexion WiFi excellente. Toutes les fonctionnalit√©s sont disponibles.',
        'Vous pouvez t√©l√©charger de nouvelles versions de Bible.',
        'La synchronisation se fait automatiquement.',
      ]);
    }
    
    return recommendations;
  }
}