import 'package:hive/hive.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'local_storage_service.dart';

/// Service pour r√©initialiser compl√®tement l'application
/// Supprime toutes les donn√©es locales (comptes, plans, pr√©f√©rences, etc.)
class AppResetService {
  /// üî• R√âINITIALISATION COMPL√àTE DE L'APPLICATION
  /// ‚ö†Ô∏è DANGER : Supprime TOUTES les donn√©es locales
  static Future<void> resetEverything() async {
    print('üî• === R√âINITIALISATION COMPL√àTE DE L\'APPLICATION ===');
    
    try {
      // 1. Supprimer toutes les boxes Hive
      await _deleteAllHiveBoxes();
      
      // 2. Supprimer toutes les SharedPreferences
      await _clearSharedPreferences();
      
      // 3. Supprimer les donn√©es de LocalStorageService
      await _clearLocalStorage();
      
      print('‚úÖ R√©initialisation compl√®te termin√©e !');
      print('üì± Red√©marrez l\'application pour cr√©er un nouveau compte.');
      
    } catch (e, stackTrace) {
      print('‚ùå Erreur lors de la r√©initialisation: $e');
      print('üìç Stack trace: $stackTrace');
      rethrow;
    }
  }
  
  /// Supprime toutes les boxes Hive
  static Future<void> _deleteAllHiveBoxes() async {
    print('üóëÔ∏è Suppression des boxes Hive...');
    
    final boxNames = [
      'local_user',      // Utilisateurs locaux
      'local_plans',     // Plans locaux
      'local_bible',     // Bibles t√©l√©charg√©es
      'local_progress',  // Progression
      'user_prefs',      // Pr√©f√©rences utilisateur
      'sync_tasks',      // T√¢ches de synchronisation
      'plans',           // Cache des plans
      'plan_days',       // Cache des jours de plans
      'prefs',           // Pr√©f√©rences (UserPrefs)
      'profile_box',     // Profil utilisateur
      'reading_log',     // Journal de lecture
      'meditation_journal', // Journal de m√©ditation
    ];
    
    for (final boxName in boxNames) {
      try {
        if (Hive.isBoxOpen(boxName)) {
          final box = Hive.box(boxName);
          await box.clear();
          print('  ‚úÖ Box "$boxName" vid√©e');
        } else {
          // Ouvrir et vider la box si elle existe
          try {
            final box = await Hive.openBox(boxName);
            await box.clear();
            await box.close();
            print('  ‚úÖ Box "$boxName" vid√©e et ferm√©e');
          } catch (e) {
            print('  ‚ÑπÔ∏è Box "$boxName" n\'existe pas (ignor√©)');
          }
        }
      } catch (e) {
        print('  ‚ö†Ô∏è Erreur suppression box "$boxName": $e');
      }
    }
    
    // Supprimer compl√®tement Hive (optionnel - radical)
    try {
      await Hive.deleteFromDisk();
      print('  ‚úÖ Hive supprim√© du disque');
    } catch (e) {
      print('  ‚ö†Ô∏è Impossible de supprimer Hive du disque: $e');
    }
  }
  
  /// Supprime toutes les SharedPreferences
  static Future<void> _clearSharedPreferences() async {
    print('üóëÔ∏è Suppression des SharedPreferences...');
    
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.clear();
      print('  ‚úÖ SharedPreferences vid√©es');
    } catch (e) {
      print('  ‚ö†Ô∏è Erreur suppression SharedPreferences: $e');
    }
  }
  
  /// Supprime les donn√©es de LocalStorageService
  static Future<void> _clearLocalStorage() async {
    print('üóëÔ∏è Suppression LocalStorageService...');
    
    try {
      await LocalStorageService.clearLocalUser();
      print('  ‚úÖ Utilisateur local supprim√©');
    } catch (e) {
      print('  ‚ö†Ô∏è Erreur suppression LocalStorageService: $e');
    }
  }
  
  /// üß™ R√âINITIALISATION PARTIELLE (seulement profil, garde les plans)
  static Future<void> resetProfileOnly() async {
    print('üîÑ R√©initialisation du profil uniquement...');
    
    try {
      // Vider seulement les boxes de profil
      final profileBoxNames = ['user_prefs', 'prefs', 'profile_box', 'local_user'];
      
      for (final boxName in profileBoxNames) {
        try {
          if (Hive.isBoxOpen(boxName)) {
            final box = Hive.box(boxName);
            await box.clear();
            print('  ‚úÖ Box "$boxName" vid√©e');
          } else {
            final box = await Hive.openBox(boxName);
            await box.clear();
            await box.close();
            print('  ‚úÖ Box "$boxName" vid√©e');
          }
        } catch (e) {
          print('  ‚ö†Ô∏è Box "$boxName": $e');
        }
      }
      
      // Vider SharedPreferences
      final prefs = await SharedPreferences.getInstance();
      await prefs.clear();
      
      print('‚úÖ Profil r√©initialis√© !');
    } catch (e) {
      print('‚ùå Erreur r√©initialisation profil: $e');
      rethrow;
    }
  }
}


