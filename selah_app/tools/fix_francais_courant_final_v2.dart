import 'dart:io';
import 'dart:convert';

void main() async {
  final file = File('assets/bibles/francais_courant.json');
  
  if (!file.existsSync()) {
    print('‚ùå Fichier francais_courant.json non trouv√©');
    return;
  }
  
  print('üîß Correction finale v2 de francais_courant.json...');
  
  try {
    // Lire le contenu
    final content = await file.readAsString();
    
    // Correction sp√©cifique pour les retours √† la ligne dans les versets
    final cleaned = content
        // Nettoyer les caract√®res de fin de ligne Windows/Mac
        .replaceAll('\r\n', '\n')
        .replaceAll('\r', '\n')
        // Remplacer les retours √† la ligne dans les versets par des espaces
        .replaceAllMapped(
          RegExp(r'"Text":"([^"]*?)\n([^"]*?)"'),
          (match) => '"Text":"${match.group(1)} ${match.group(2)}"'
        )
        // Corriger les retours √† la ligne dans les structures JSON
        .replaceAll('",\n"Text":', '", "Text":')
        .replaceAll('",\n"ID":', '", "ID":')
        .replaceAll('},\n{', '},{')
        .replaceAll('],\n[', '],[')
        .replaceAll('},\n]', '}]')
        .replaceAll('},\n}', '}}')
        // Nettoyer les espaces multiples
        .replaceAll(RegExp(r'\s{2,}'), ' ')
        .replaceAll(RegExp(r'\n\s*\n'), '\n')
        .trim();
    
    // Sauvegarder le fichier nettoy√©
    await file.writeAsString(cleaned);
    print('‚úÖ francais_courant.json nettoy√© avec succ√®s');
    
    // Tester la validit√©
    try {
      final testData = jsonDecode(cleaned);
      print('‚úÖ JSON valide apr√®s nettoyage');
      
      // V√©rifier la structure
      if (testData is Map && testData.containsKey('Testaments')) {
        print('‚úÖ Structure Testaments trouv√©e');
        final testaments = testData['Testaments'] as List;
        if (testaments.isNotEmpty) {
          final firstTestament = testaments.first as Map;
          if (firstTestament.containsKey('Books')) {
            print('‚úÖ Structure Books trouv√©e');
            final books = firstTestament['Books'] as List;
            if (books.isNotEmpty) {
              final firstBook = books.first as Map;
              if (firstBook.containsKey('Chapters')) {
                print('‚úÖ Structure Chapters trouv√©e');
                final chapters = firstBook['Chapters'] as List;
                if (chapters.isNotEmpty) {
                  final firstChapter = chapters.first as Map;
                  if (firstChapter.containsKey('Verses')) {
                    print('‚úÖ Structure Verses trouv√©e');
                    final verses = firstChapter['Verses'] as List;
                    print('‚úÖ Premier verset: ${verses.first}');
                  }
                }
              }
            }
          }
        }
      }
    } catch (e) {
      print('‚ö†Ô∏è JSON invalide apr√®s nettoyage: $e');
    }
    
  } catch (e) {
    print('‚ùå Erreur avec francais_courant.json: $e');
  }
}


