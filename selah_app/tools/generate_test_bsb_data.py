#!/usr/bin/env python3
"""
Script pour gÃ©nÃ©rer des donnÃ©es de test BSB
CrÃ©e des fichiers JSONL.gz de test pour le dÃ©veloppement
"""

import json
import gzip
import os
from pathlib import Path

def generate_test_topics_links():
    """GÃ©nÃ¨re des donnÃ©es de test pour topics_links.jsonl.gz"""
    print("ðŸ“š GÃ©nÃ©ration des donnÃ©es de test topics_links...")
    
    # DonnÃ©es de test
    test_data = [
        [0, "Jean", 3, 16, 0.95],  # Amour
        [0, "1 Jean", 4, 8, 0.90],
        [0, "1 Corinthiens", 13, 4, 0.85],
        [1, "HÃ©breux", 11, 1, 0.95],  # Foi
        [1, "Romains", 10, 17, 0.90],
        [1, "Ã‰phÃ©siens", 2, 8, 0.85],
        [2, "Romains", 15, 13, 0.95],  # EspÃ©rance
        [2, "1 Pierre", 1, 3, 0.90],
        [2, "Tite", 2, 13, 0.85],
        [3, "Ã‰phÃ©siens", 2, 8, 0.95],  # GrÃ¢ce
        [3, "Tite", 2, 11, 0.90],
        [3, "Romains", 3, 24, 0.85],
        [4, "Actes", 4, 12, 0.95],  # Salut
        [4, "Romains", 10, 9, 0.90],
        [4, "Jean", 3, 16, 0.85],
        [5, "Matthieu", 6, 9, 0.95],  # PriÃ¨re
        [5, "1 Thessaloniciens", 5, 17, 0.90],
        [5, "Philippiens", 4, 6, 0.85],
        [6, "Proverbes", 9, 10, 0.95],  # Sagesse
        [6, "Jacques", 1, 5, 0.90],
        [6, "1 Corinthiens", 1, 30, 0.85],
        [7, "Amos", 5, 24, 0.95],  # Justice
        [7, "MichÃ©e", 6, 8, 0.90],
        [7, "Romains", 3, 26, 0.85],
        [8, "Jean", 14, 27, 0.95],  # Paix
        [8, "Philippiens", 4, 7, 0.90],
        [8, "Romains", 5, 1, 0.85],
        [9, "Galates", 5, 22, 0.95],  # Joie
        [9, "Philippiens", 4, 4, 0.90],
        [9, "NÃ©hÃ©mie", 8, 10, 0.85],
    ]
    
    # CrÃ©er le rÃ©pertoire de sortie
    output_dir = Path("export_bsb")
    output_dir.mkdir(exist_ok=True)
    
    # Sauvegarder en JSONL.gz
    output_path = output_dir / "topics_links.jsonl.gz"
    with gzip.open(output_path, 'wt', encoding='utf-8') as f:
        for row in test_data:
            f.write(json.dumps(row, ensure_ascii=False) + '\n')
    
    print(f"âœ… topics_links.jsonl.gz gÃ©nÃ©rÃ©: {output_path} ({output_path.stat().st_size} bytes)")

def generate_test_concordance():
    """GÃ©nÃ¨re des donnÃ©es de test pour concordance.jsonl.gz"""
    print("ðŸ“– GÃ©nÃ©ration des donnÃ©es de test concordance...")
    
    # DonnÃ©es de test
    test_data = [
        ["aimer", "aime", "Jean", 3, 16, "v"],
        ["aimer", "aimÃ©", "1 Jean", 4, 8, "v"],
        ["aimer", "amour", "1 Corinthiens", 13, 4, "n"],
        ["croire", "crois", "HÃ©breux", 11, 1, "v"],
        ["croire", "croyance", "Romains", 10, 17, "n"],
        ["croire", "foi", "Ã‰phÃ©siens", 2, 8, "n"],
        ["espÃ©rer", "espÃ¨re", "Romains", 15, 13, "v"],
        ["espÃ©rer", "espÃ©rance", "1 Pierre", 1, 3, "n"],
        ["espÃ©rer", "espÃ©rance", "Tite", 2, 13, "n"],
        ["grÃ¢ce", "grÃ¢ce", "Ã‰phÃ©siens", 2, 8, "n"],
        ["grÃ¢ce", "gracieux", "Tite", 2, 11, "adj"],
        ["grÃ¢ce", "gracieux", "Romains", 3, 24, "adj"],
        ["sauver", "sauve", "Actes", 4, 12, "v"],
        ["sauver", "salut", "Romains", 10, 9, "n"],
        ["sauver", "sauveur", "Jean", 3, 16, "n"],
        ["prier", "prie", "Matthieu", 6, 9, "v"],
        ["prier", "priÃ¨re", "1 Thessaloniciens", 5, 17, "n"],
        ["prier", "priÃ¨re", "Philippiens", 4, 6, "n"],
        ["sagesse", "sagesse", "Proverbes", 9, 10, "n"],
        ["sagesse", "sage", "Jacques", 1, 5, "adj"],
        ["sagesse", "sage", "1 Corinthiens", 1, 30, "adj"],
        ["justice", "justice", "Amos", 5, 24, "n"],
        ["justice", "juste", "MichÃ©e", 6, 8, "adj"],
        ["justice", "juste", "Romains", 3, 26, "adj"],
        ["paix", "paix", "Jean", 14, 27, "n"],
        ["paix", "paix", "Philippiens", 4, 7, "n"],
        ["paix", "paix", "Romains", 5, 1, "n"],
        ["joie", "joie", "Galates", 5, 22, "n"],
        ["joie", "joyeux", "Philippiens", 4, 4, "adj"],
        ["joie", "joyeux", "NÃ©hÃ©mie", 8, 10, "adj"],
    ]
    
    # CrÃ©er le rÃ©pertoire de sortie
    output_dir = Path("export_bsb")
    output_dir.mkdir(exist_ok=True)
    
    # Sauvegarder en JSONL.gz
    output_path = output_dir / "concordance.jsonl.gz"
    with gzip.open(output_path, 'wt', encoding='utf-8') as f:
        for row in test_data:
            f.write(json.dumps(row, ensure_ascii=False) + '\n')
    
    print(f"âœ… concordance.jsonl.gz gÃ©nÃ©rÃ©: {output_path} ({output_path.stat().st_size} bytes)")

def main():
    print("ðŸš€ GÃ©nÃ©ration des donnÃ©es de test BSB")
    
    # GÃ©nÃ©rer les fichiers de test
    generate_test_topics_links()
    generate_test_concordance()
    
    print("\nâœ… DonnÃ©es de test gÃ©nÃ©rÃ©es avec succÃ¨s !")
    print("\nðŸ“‹ Fichiers gÃ©nÃ©rÃ©s:")
    
    output_dir = Path("export_bsb")
    for file in output_dir.glob("*"):
        size = file.stat().st_size
        size_str = f"{size:,} bytes"
        if size > 1024:
            size_str = f"{size/1024:.1f} KB"
        print(f"   {file.name}: {size_str}")

if __name__ == '__main__':
    main()
